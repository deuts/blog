<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Caddy on Deuts Log</title>
    <link>https://deuts.org/a/caddy/</link>
    <description>Recent content in Caddy on Deuts Log</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>en</language>
    <copyright>2024 Deuts Log</copyright>
    <lastBuildDate>Fri, 15 Nov 2024 13:33:00 +0800</lastBuildDate>
    <atom:link href="https://deuts.org/a/caddy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resilio Sync</title>
      <link>https://deuts.org/l/resilio-sync/</link>
      <pubDate>Fri, 15 Nov 2024 13:33:00 +0800</pubDate>
      <guid>https://deuts.org/l/resilio-sync/</guid>
      <description>Resilio Sync offers fast, secure file synchronization using peer-to-peer technology. With no file size limits and encryption, it ensures privacy and control, making it ideal for personal use, team collaboration, and large-scale file sharing.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p><strong>Resilio Sync</strong> is a file synchronization software that uses peer-to-peer (P2P) technology to share and sync files across devices. It enables secure, fast, and efficient file transfers by leveraging the BitTorrent protocol. Resilio Sync allows users to create shared folders or &ldquo;syncs,&rdquo; which are encrypted and accessible only to devices with the unique access key. Key features include real-time updates, no file size limits, cross-platform compatibility, and the ability to sync files without relying on cloud storage providers, ensuring privacy and control over data. It is commonly used for personal backups, team collaboration, and large-scale file distribution.</p>
<h2 id="composeyml"><code>compose.yml</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resilio-sync</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">linuxserver/resilio-sync</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">resilio-sync</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=Asia/Manila</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./config:/config</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./downloads:/downloads</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span><span style="color:#75715e">#      - 8888:8888 # web GUI, to be proxied via caddy</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">55555</span>:<span style="color:#ae81ff">55555</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">caddynetwork</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">caddynetwork</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><h3 id="notes">Notes</h3>
<ul>
<li>Make sure to have already created the <code>caddynetwork</code> with <code>docker network create caddynetwork</code></li>
<li>Container port <code>8888</code> is proxied via <code>caddy</code></li>
<li>Change <code>PUID</code>, <code>PGID</code>, and <code>TZ</code> to what is applicable to your setup</li>
<li>The first time you spin up the container and access the site, you will be prompted to create your <code>username</code> and <code>password</code></li>
</ul>
<h2 id="caddyfile"><code>Caddyfile</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-caddy" data-lang="caddy"><span style="display:flex;"><span>sync.deuts.org {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">reverse_proxy</span> resilio-sync:<span style="color:#ae81ff">8888</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Custom Caddy Docker image with Cloudflare DNS challenge support</title>
      <link>https://deuts.org/p/caddy-docker-cloudflare-dns-challenge/</link>
      <pubDate>Fri, 15 Nov 2024 08:11:44 +0800</pubDate>
      <guid>https://deuts.org/p/caddy-docker-cloudflare-dns-challenge/</guid>
      <description>Configure a custom Caddy Docker image to use Cloudflare’s DNS challenge, securing HTTPS without exposing ports 80/443, ideal for firewall, CGNAT, and load-balancer setups.</description>
      <content:encoded><![CDATA[<p>Securing your web services with SSL/TLS certificates is crucial, especially when dealing with public servers. Using Caddy’s built-in HTTPS functionality is easy, but situations involving firewalls, CGNAT, or a lack of access to port 80/443 benefit from Cloudflare&rsquo;s DNS challenge for seamless certificate automation. This tutorial outlines how to build a custom Caddy Docker image that integrates Cloudflare’s DNS module using <code>xcaddy</code> to streamline this process.</p>
<h3 id="why-opt-for-cloudflare-dns-challenge">Why Opt for Cloudflare DNS Challenge?</h3>
<p>Caddy&rsquo;s HTTP and TLS challenges work well for most, but the DNS challenge shines when:</p>
<ul>
<li>Your server is behind a firewall or CGNAT.</li>
<li>You want to avoid exposing ports 80 and 443 to the public.</li>
<li>Your setup includes a load balancer or other restrictive networking configurations.</li>
</ul>
<p>This method authenticates your domain ownership via the Cloudflare DNS API, allowing Caddy to fetch certificates without the need for open HTTP/HTTPS ports. See <a href="#how-the-dns-challenge-works">How the DNS Challenge Works</a> for more info.</p>
<h3 id="building-a-custom-caddy-image">Building a Custom Caddy Image</h3>
<p>The Dockerfile follows a multi-stage build:</p>
<ol>
<li><strong>Builder Stage</strong>: We use <code>xcaddy</code> to compile Caddy with the Cloudflare DNS provider plugin.</li>
<li><strong>Final Stage</strong>: The resulting binary is copied to a fresh Caddy image, creating a production-ready and lean container.</li>
</ol>
<h3 id="how-to-set-up-and-run">How to Set Up and Run</h3>
<h4 id="step-1-create-a-custom-docker-network-optional">Step 1: Create a Custom Docker Network (Optional)</h4>
<p>Creating a custom Docker network keeps services isolated and minimizes the need to expose ports on your VPS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker network create caddynetwork
</span></span></code></pre></div><p>If you choose a different network name, ensure the <code>compose.yml</code> file reflects it.</p>
<h4 id="step-2-create-your-composeyml-file">Step 2: Create your <code>compose.yml</code> file</h4>
<p>Below is the <code>compose.yml</code> configuration, which builds a custom Caddy Docker image and sets up networking for enhanced security:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">caddy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">caddy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">CLOUDFLARE_API_TOKEN=&lt;ENTER YOUR TOKEN HERE&gt;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">CADDY_ACME_EMAIL=&lt;ENTER YOUR EMAIL HERE&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;80:80&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;443:443&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./Caddyfile:/etc/caddy/Caddyfile</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./data:/data</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./config:/config</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">caddynetwork</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">caddynetwork</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><h4 id="step-3-configure-composeyml">Step 3: Configure <code>compose.yml</code></h4>
<p>Rename <code>_compose.yml</code> to <code>compose.yml</code> and set your environment variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">CLOUDFLARE_API_TOKEN=&lt;YOUR_TOKEN&gt;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">CADDY_ACME_EMAIL=&lt;YOUR_EMAIL&gt;</span>
</span></span></code></pre></div><ul>
<li><strong>CLOUDFLARE_API_TOKEN</strong>: Ensure this token has permissions for DNS zone edits on Cloudflare.</li>
<li><strong>CADDY_ACME_EMAIL</strong>: This email will be used by ACME for certificate registration.</li>
</ul>
<h4 id="step-4-build-and-run">Step 4: Build and Run</h4>
<p>Use Docker Compose to build and start the container in detached mode:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose up -d --build
</span></span></code></pre></div><h4 id="step-5-edit-your-caddyfile">Step 5: Edit Your Caddyfile</h4>
<p>Adjust your <code>Caddyfile</code> with the necessary domain and service details. Here’s a sample:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-caddy" data-lang="caddy"><span style="display:flex;"><span>example.com {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">reverse_proxy</span> localhost:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">tls</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">dns</span> <span style="color:#e6db74">cloudflare</span> <span style="color:#ae81ff">{env.CLOUDFLARE_API_TOKEN}</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Replace <code>example.com</code> with your actual domain.</li>
<li>Set <code>localhost</code> to the name or IP of your backend service.</li>
<li>Adjust <code>8080</code> to the port where your application runs.</li>
</ul>
<p>With this setup, Caddy will use Cloudflare’s DNS challenge to obtain certificates, keeping your services secure without exposing common HTTP/HTTPS ports.</p>
<hr>
<h3 id="how-the-dns-challenge-works">How the DNS Challenge Works</h3>
<p>Typically, to issue an SSL/TLS certificate, Caddy (or any Certificate Authority, CA) needs to verify that you actually own the domain in question. Normally, this is done by:</p>
<ol>
<li><strong>HTTP Challenge</strong>: Verifying domain ownership by placing a file on an accessible web server running on port 80.</li>
<li><strong>TLS-ALPN Challenge</strong>: Verifying via a specific response from a server running on port 443.</li>
</ol>
<p>However, both these methods require public access to specific ports on the server (80 or 443), which may not be feasible if:</p>
<ul>
<li><strong>Your server is behind a firewall</strong> or behind Carrier-Grade NAT (CGNAT) on a network that doesn’t expose external ports.</li>
<li><strong>You don’t want to expose ports 80 and 443 publicly</strong> for security or regulatory reasons.</li>
<li><strong>You’re using a load balancer</strong> or reverse proxy setup where ports may not map directly to a specific server.</li>
</ul>
<h3 id="why-the-cloudflare-dns-challenge-solves-this">Why the Cloudflare DNS Challenge Solves This</h3>
<p>The <strong>DNS challenge</strong> verifies domain ownership by checking for specific DNS records instead of requiring public access to your server. Here’s how it works:</p>
<ol>
<li><strong>Caddy uses Cloudflare’s API to add a special TXT record to your domain’s DNS settings</strong> (hosted on Cloudflare).</li>
<li><strong>The CA (e.g., Let’s Encrypt) queries Cloudflare’s DNS servers</strong> for the TXT record to verify domain ownership.</li>
<li>Once verified, the CA issues a certificate to Caddy for your domain, which it saves and manages.</li>
</ol>
<p>Because the DNS challenge doesn’t involve your server’s IP address or port accessibility, it allows Caddy to obtain certificates even when direct access to your server is restricted.</p>
<h3 id="why-you-need-cloudflare-api-permissions">Why You Need Cloudflare API Permissions</h3>
<p>The DNS challenge requires dynamically creating and removing DNS records on your domain during each certificate renewal. By providing Caddy with Cloudflare’s API token, you enable it to manage the necessary DNS records for verification, fully automating the certificate issuance and renewal process without exposing any ports.</p>
<p>In summary, <strong>the Cloudflare DNS challenge is essential</strong> when public port access is unavailable or undesirable. It’s a robust way to automate certificate management, especially in complex network environments, by verifying domain ownership through DNS rather than HTTP or TLS ports.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Securing Your Docker-Hosted Service with HTTP Basic Authentication in Caddy</title>
      <link>https://deuts.org/p/docker-caddy-basic-auth/</link>
      <pubDate>Thu, 14 Nov 2024 21:46:40 +0800</pubDate>
      <guid>https://deuts.org/p/docker-caddy-basic-auth/</guid>
      <description>Learn to secure Docker services with Caddy’s Basic Authentication by setting up a reverse proxy to protect internal or staging containers and restrict access to specific paths.</description>
      <content:encoded><![CDATA[<p>HTTP Basic Authentication offers a quick way to secure access to internal or staging services in a Docker environment, especially for controlled scenarios where high security isn’t critical. Although credentials sent via Basic Authentication can be decoded if intercepted, combining it with HTTPS ensures encryption, making it suitable for simple use cases. Here, we’ll set up Caddy as a reverse proxy with Basic Authentication to limit access to a service running in another container.</p>
<h3 id="scenario-overview">Scenario Overview</h3>
<p>In this example, we have:</p>
<ul>
<li>A <strong>Caddy container</strong> named <code>caddy</code></li>
<li>A <strong>service container</strong> named <code>sampledockercontainer</code>, which is the service we’re protecting, running on port <code>8080</code></li>
<li>Both containers are on the same <strong>Docker network</strong></li>
<li>The goal is to limit access to the <code>sampledockercontainer</code> service with Basic Authentication</li>
</ul>
<h3 id="setting-up-the-caddyfile">Setting Up the Caddyfile</h3>
<p>Start with a simple Caddyfile that proxies traffic to the <code>sampledockercontainer</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Caddyfile" data-lang="Caddyfile"><span style="display:flex;"><span>example.com {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">reverse_proxy</span> sampledockercontainer:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This configuration forwards all requests for <code>example.com</code> to the <code>sampledockercontainer</code> service within the Docker network.</p>
<h3 id="generating-a-hashed-password-for-authentication">Generating a Hashed Password for Authentication</h3>
<p>Since Caddy is running as a Docker container, use the following <code>docker exec</code> command to generate a hashed password for authentication:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker exec -it caddy caddy hash-password --plaintext <span style="color:#e6db74">&#39;yoursupersecretpassword&#39;</span>
</span></span></code></pre></div><p>Assuming your username is <code>user</code>, the command returns a hashed password like:</p>
<pre tabindex="0"><code>$2a$14$UnmpufOS3hIBsW5Jn.lbpe0qtoa5kCKYfJNPGsgnOr2D6mPma8aPm
</code></pre><h3 id="adding-basic-authentication-to-the-caddyfile">Adding Basic Authentication to the Caddyfile</h3>
<p>Update the Caddyfile to include Basic Authentication, securing access to <code>example.com</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Caddyfile" data-lang="Caddyfile"><span style="display:flex;"><span>example.com {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">basicauth</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">user</span> <span style="color:#e6db74">$2a$14$UnmpufOS3hIBsW5Jn.lbpe0qtoa5kCKYfJNPGsgnOr2D6mPma8aPm</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">reverse_proxy</span> sampledockercontainer:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now, visitors will be prompted for a username and password before gaining access.</p>
<h3 id="restricting-authentication-to-specific-paths">Restricting Authentication to Specific Paths</h3>
<p>You may want only certain paths to require authentication, allowing general access to others. For example, you can limit Basic Authentication to the <code>/admin</code> path while keeping the root URL publicly accessible:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Caddyfile" data-lang="Caddyfile"><span style="display:flex;"><span>example.com {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">basicauth</span> <span style="color:#a6e22e">/admin/*</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">user</span> <span style="color:#e6db74">$2a$14$UnmpufOS3hIBsW5Jn.lbpe0qtoa5kCKYfJNPGsgnOr2D6mPma8aPm</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">reverse_proxy</span> <span style="color:#a6e22e">/admin/*</span> sampledockercontainer:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">reverse_proxy</span> <span style="color:#a6e22e">/*</span> sampledockercontainer:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With this setup:</p>
<ul>
<li>Requests to <code>example.com</code> are open to all users.</li>
<li>Requests to <code>example.com/admin/</code> require a valid username and password.</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>This Caddyfile setup demonstrates a simple, effective way to protect containerized services with Basic Authentication. For Dockerized applications, Caddy makes it easy to limit access to sensitive areas, securing your internal or staging environments with minimal configuration.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
