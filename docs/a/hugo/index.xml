<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hugo on Deuts Log</title>
    <link>https://deuts.org/a/hugo/</link>
    <description>Recent content in Hugo on Deuts Log</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <copyright>2024 Deuts Log</copyright>
    <lastBuildDate>Sun, 05 Jan 2025 09:03:38 +0800</lastBuildDate>
    <atom:link href="https://deuts.org/a/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Additional Documentation for Hugo PaperMod Post Cover Image</title>
      <link>https://deuts.org/p/add-docs-hugo-papermod-cover-image/</link>
      <pubDate>Sun, 05 Jan 2025 09:03:38 +0800</pubDate>
      <guid>https://deuts.org/p/add-docs-hugo-papermod-cover-image/</guid>
      <description>Here&amp;#39;s how to set up a cover image in Hugo PaperMod posts, including the use of relative paths in page bundles to ensure the image links are correctly resolved.</description>
      <content:encoded><![CDATA[<p>In the <a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Features#post-cover-image">Hugo PaperMod wiki</a>, the process for adding a cover image to your posts is outlined. Below is the relevant frontmatter structure, taken directly from the wiki:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">cover</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;&lt;image path/url&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># You can also use a direct link from an external site</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Example: https://i.ibb.co/K0HVPBd/paper-mod-profilemode.png</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">alt</span>: <span style="color:#e6db74">&#34;&lt;alt text&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">caption</span>: <span style="color:#e6db74">&#34;&lt;text&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">relative</span>: <span style="color:#66d9ef">false</span> <span style="color:#75715e"># Use relative path for cover image, particularly in Hugo page bundles</span>
</span></span></code></pre></div><p>If you&rsquo;re working with <a href="https://gohugo.io/content-management/page-bundles/">page bundles</a> and your file structure looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── cover-image.jpg
</span></span><span style="display:flex;"><span>└── index.md
</span></span></code></pre></div><p>The frontmatter should be adjusted as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">cover</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;cover-image.jpg&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">relative</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>It&rsquo;s important to set <code>relative: true</code> when using page bundles. If this isn&rsquo;t set, the <code>&lt;head&gt;</code> of your page will contain an incorrect link, leading to a 404 error, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">property</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;og:image&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://deuts.org/cover-image.jpg&#34;</span>&gt;
</span></span></code></pre></div><p>Setting <code>relative: true</code> ensures that the image link is correctly handled within the page bundle, avoiding broken links.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Hugo Automated Install and Update</title>
      <link>https://deuts.org/p/hugo-automated-install-and-update/</link>
      <pubDate>Fri, 03 Jan 2025 18:36:50 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-automated-install-and-update/</guid>
      <description>Automate the process of fetching the latest Hugo Extended release directly from GitHub, downloading it, and installing it, making sure your system always runs the most up-to-date version. </description>
      <content:encoded><![CDATA[<p>Installing Hugo via package managers like apt on Linux (Debian, Ubuntu) often results in outdated versions, which can be delayed by months or even years. While installing Hugo directly from GitHub is the best way to stay current, manually downloading the .deb package each time a new version is released can be a chore. Many users find themselves putting off updates, leaving Hugo outdated for longer than they&rsquo;d like.</p>
<p>This simple script automates both the installation and updating of Hugo Extended to the latest version directly from GitHub. It checks if Hugo is installed, fetches the latest release, and installs it, all while eliminating the need for manual downloads or worrying about missing updates. It’s designed for the Hugo Extended amd64 Linux version but can be easily modified to suit different systems or versions.</p>
<h3 id="the-script">The Script</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check if Hugo is installed by running `hugo version`</span>
</span></span><span style="display:flex;"><span>HUGO_VERSION<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>hugo version 2&gt;/dev/null<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $? -ne <span style="color:#ae81ff">0</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># If hugo is not installed, print the message</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Hugo is not yet installed.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># If hugo is installed, display the current version</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;</span>$HUGO_VERSION<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Fetch the URL of the latest Hugo extended release for Linux (non-withdeploy version)</span>
</span></span><span style="display:flex;"><span>HUGO_URL<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>grep <span style="color:#e6db74">&#34;browser_download_url&#34;</span> | grep <span style="color:#e6db74">&#34;hugo_extended&#34;</span> | grep <span style="color:#e6db74">&#34;linux-amd64.deb&#34;</span> | grep -v <span style="color:#e6db74">&#34;withdeploy&#34;</span> | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>sed -E <span style="color:#e6db74">&#39;s/.*&#34;([^&#34;]+)&#34;.*/\1/&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check if the URL was successfully retrieved</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -z <span style="color:#e6db74">&#34;</span>$HUGO_URL<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Error: Unable to retrieve the latest Hugo release URL.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Extract the filename from the URL (e.g., hugo_extended_0.140.2_linux-amd64.deb)</span>
</span></span><span style="display:flex;"><span>FILE_NAME<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>basename <span style="color:#e6db74">&#34;</span>$HUGO_URL<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Prompt the user before downloading, based on whether Hugo is installed or not</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -z <span style="color:#e6db74">&#34;</span>$HUGO_VERSION<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># If Hugo is not installed</span>
</span></span><span style="display:flex;"><span>    echo -n <span style="color:#e6db74">&#34;Latest Hugo Extended version is </span>$FILE_NAME<span style="color:#e6db74">. Do you want to download it? (y/n): &#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># If Hugo is installed</span>
</span></span><span style="display:flex;"><span>    echo -n <span style="color:#e6db74">&#34;Latest Hugo Extended version is </span>$FILE_NAME<span style="color:#e6db74">. Do you want to download it? (y/n): &#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>read -r RESPONSE
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;</span>$RESPONSE<span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;y&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Download aborted.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Download the latest Hugo .deb package with its original name</span>
</span></span><span style="display:flex;"><span>wget -q <span style="color:#e6db74">&#34;</span>$HUGO_URL<span style="color:#e6db74">&#34;</span> -O <span style="color:#e6db74">&#34;</span>$FILE_NAME<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Error: Failed to download Hugo package.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Prompt the user before installing</span>
</span></span><span style="display:flex;"><span>echo -n <span style="color:#e6db74">&#34;Do you want to install the Hugo package </span>$FILE_NAME<span style="color:#e6db74">? (y/n): &#34;</span>
</span></span><span style="display:flex;"><span>read -r RESPONSE
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;</span>$RESPONSE<span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;y&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Installation aborted.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install the downloaded Hugo package</span>
</span></span><span style="display:flex;"><span>sudo dpkg -i <span style="color:#e6db74">&#34;</span>$FILE_NAME<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Error: Failed to install Hugo package.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Success message</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Hugo package </span>$FILE_NAME<span style="color:#e6db74"> has been successfully installed.&#34;</span>
</span></span><span style="display:flex;"><span>hugo version
</span></span></code></pre></div><h3 id="how-to-use">How to Use</h3>
<ol>
<li>
<p><strong>Save and Make the Script Executable</strong><br>
Copy the script into a file (e.g., <code>update_hugo.sh</code>) and make it executable with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chmod +x update_hugo.sh
</span></span></code></pre></div></li>
<li>
<p><strong>Run the Script</strong><br>
Execute the script with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./update_hugo.sh
</span></span></code></pre></div><p>The script will check if Hugo is installed, prompt you to download the latest version (which will be saved in the same directory as the script), and ask if you want to install it.</p>
</li>
<li>
<p><strong>Verify Installation</strong><br>
Once installed, you can check the Hugo version with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo version
</span></span></code></pre></div></li>
</ol>
<h3 id="conclusion">Conclusion</h3>
<p>This script automates Hugo updates, ensuring you always have the latest version without the hassle of manual installation. Perfect for users who want to avoid outdated versions from <code>apt</code> and streamline their workflow, it keeps your Hugo installation current with minimal effort. Customize it for your own system and preferred version, and enjoy a seamless update process.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Hugo vs. Jekyll: Which One Should You Choose?</title>
      <link>https://deuts.org/p/hugo-vs-jekyll/</link>
      <pubDate>Fri, 22 Nov 2024 14:09:57 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-vs-jekyll/</guid>
      <description>Wondering whether to choose Hugo or Jekyll for your static site? Read on as we compare their strengths, weaknesses, and hosting options, helping you make an informed decision based on your preferences and project requirements.</description>
      <content:encoded><![CDATA[<p>If you&rsquo;re deciding between <a class="applink" href="https://deuts.org/a/hugo" target="_blank">Hugo</a> and <a class="applink" href="https://deuts.org/a/jekyll" target="_blank">Jekyll</a> for your static site generator, here&rsquo;s a clear comparison to help you choose the right tool for your needs.</p>
<table>
  <thead>
      <tr>
          <th><strong>Criteria</strong></th>
          <th><strong>Hugo</strong></th>
          <th><strong>Jekyll</strong></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Performance</strong></td>
          <td>Extremely fast; can rebuild thousands of pages in seconds. Great for large or frequently updated sites.</td>
          <td>Slower compared to Hugo, especially with large sites. Suitable for smaller, less frequently updated sites.</td>
      </tr>
      <tr>
          <td><strong>Installation</strong></td>
          <td>Simple: a single binary with no dependencies.</td>
          <td>Requires Ruby and Gems, which can be complex for non-Ruby users.</td>
      </tr>
      <tr>
          <td><strong>Themes</strong></td>
          <td>Flexible with advanced customization options and shortcodes. Templates use Go’s templating engine.</td>
          <td>Large library of pre-built themes. Uses Liquid templates, which are simpler but less powerful for advanced users.</td>
      </tr>
      <tr>
          <td><strong>Markdown Support</strong></td>
          <td>Native support with configurable front matter (TOML, YAML, JSON). Excellent for multilingual sites.</td>
          <td>Markdown support via plugins like kramdown. Front matter is YAML-only. Limited multilingual capabilities.</td>
      </tr>
      <tr>
          <td><strong>Ecosystem</strong></td>
          <td>Rapidly growing community with a smaller but expanding theme library. Hugo also has more GitHub stars, reflecting its developer appeal.</td>
          <td>Established ecosystem with a mature community and wide adoption. Native integration with GitHub Pages.</td>
      </tr>
      <tr>
          <td><strong>Plugins</strong></td>
          <td>No plugins; functionality is built-in or handled externally. Faster and more secure as a result.</td>
          <td>Extensive plugin ecosystem for advanced features. Can slow down build times and add complexity.</td>
      </tr>
      <tr>
          <td><strong>Use Case</strong></td>
          <td>Best for performance-focused, large, multilingual, or highly customized sites.</td>
          <td>Great for smaller sites, blogs, or projects requiring GitHub Pages integration or extensive plugins.</td>
      </tr>
  </tbody>
</table>
<div class="callout info">
  <div class="callout-content">
    <strong>On Github Pages Hosting</strong>
    <p>
Jekyll has native support on GitHub Pages, allowing you to upload Markdown files directly to your repository and have the site built automatically on GitHub’s servers. In contrast, Hugo requires you to build the site yourself (using the hugo command) before deploying the generated static files to GitHub Pages.
</p>
  </div>
</div>
<hr>
<h3 id="recommendations">Recommendations</h3>
<ul>
<li>
<p><strong>Choose Hugo</strong> if you:</p>
<ul>
<li>Need blazing-fast performance.</li>
<li>Prefer a simpler installation process.</li>
<li>Work on multilingual or large sites.</li>
<li>Want flexibility and control over site structure and layout.</li>
</ul>
</li>
<li>
<p><strong>Choose Jekyll</strong> if you:</p>
<ul>
<li>Need an extensive plugin ecosystem.</li>
<li>Want simplicity with pre-built themes.</li>
<li>Rely heavily on GitHub Pages for hosting.</li>
</ul>
</li>
</ul>
<hr>
<h3 id="conclusion">Conclusion</h3>
<p>Hugo and Jekyll are both excellent tools, but your choice will depend on your specific needs. While Hugo&rsquo;s rising GitHub star count highlights its developer-first focus and popularity among performance-conscious users, Jekyll shines with its ease of use and extensive theme community.</p>
<p>At the end of the day, Hugo and Jekyll are like coffee and tea—both get the job done, but one’s probably better suited to your taste. So, pick your brew, and let the static site-building begin!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Understanding Hugo’s Section Structure with `_index.md` Files</title>
      <link>https://deuts.org/p/understanding-hugo-sections-index/</link>
      <pubDate>Thu, 21 Nov 2024 13:53:32 +0800</pubDate>
      <guid>https://deuts.org/p/understanding-hugo-sections-index/</guid>
      <description>Hugo’s sections are defined by directories containing `_index.md` files. This post explains how Hugo handles sections and subsections, including how content from a subsection’s `_index.md` appears in the parent section.</description>
      <content:encoded><![CDATA[<h2 id="understanding-hugos-section-structure"><strong>Understanding Hugo’s Section Structure</strong></h2>
<p>Hugo organizes content into sections based on directories that contain an <code>_index.md</code> file. This file acts as the homepage for the section and controls how content is displayed. Here&rsquo;s how sections and subsections behave:</p>
<h3 id="sections-in-hugo"><strong>Sections in Hugo</strong></h3>
<ol>
<li>
<p><strong>Parent Section</strong> (<code>_index.md</code>):</p>
<ul>
<li>A folder with an <code>_index.md</code> file defines a section.</li>
<li>Hugo lists the content from this section, including content from any subsections (directories with their own <code>_index.md</code> files).</li>
</ul>
</li>
<li>
<p><strong>Subsection</strong> (Subfolder with <code>_index.md</code>):</p>
<ul>
<li>A subfolder with its own <code>_index.md</code> file defines a subsection.</li>
<li>The content from this subsection’s <code>_index.md</code> will <strong>appear as part of the parent section’s content</strong>.</li>
</ul>
</li>
</ol>
<h3 id="example-structure"><strong>Example Structure</strong></h3>
<pre tabindex="0"><code>content/staging
├── _index.md        # Section 1 (Homepage)
├── new-post/index.md
└── sample
    ├── _index.md    # Section 2 (Homepage)
    ├── check.md
    └── post.md
</code></pre><ul>
<li><strong>Section 1</strong>: Lists <code>new-post/index.md</code> and <strong>includes content</strong> from <code>sample/_index.md</code> (Section 2), displaying it as part of Section 1.</li>
<li><strong>Section 2</strong>: Lists content files <code>check.md</code> and <code>post.md</code> as part of its own content.</li>
</ul>
<h3 id="key-takeaways"><strong>Key Takeaways</strong></h3>
<ul>
<li><strong>Parent sections</strong> list <strong>and display</strong> content from their subsections, including the content from the <code>_index.md</code> of the subsections.</li>
<li><strong>Subsections</strong> list their own content (like <code>check.md</code>, <code>post.md</code>) but not the content from the parent section.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Enhancing Readability with Callouts in Hugo</title>
      <link>https://deuts.org/p/hugo-callouts/</link>
      <pubDate>Thu, 14 Nov 2024 18:26:00 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-callouts/</guid>
      <description>Discover how callouts can enhance readability and engagement by highlighting key information in notes or web content. Learn how to implement custom callouts in Hugo using shortcodes, making important details more accessible and memorable for your readers.</description>
      <content:encoded><![CDATA[<h2 id="why-use-callouts">Why use callouts</h2>
<p>Callouts in notes or web content are a secret weapon for enhancing readability and guiding the reader’s focus. By spotlighting key points such as tips, warnings, or action items, callouts break up dense text, making it visually engaging and easy to navigate—perfect for readers who like to skim for the good stuff. Think of them as visual pitstops for key information.</p>
<p>Beyond making content look better, callouts help readers retain critical details. By emphasizing important points, callouts make it more likely that the message will stick long after the reader has moved on. Plus, they boost engagement, encouraging readers to linger on essential details they might otherwise miss. In short, callouts don’t just share information; they make it memorable.</p>
<h2 id="hugo-support-for-callouts">Hugo support for callouts</h2>
<p>Hugo doesn’t come with built-in support for callouts, but there’s a simple solution—shortcodes! By using a shortcode, you can add custom callouts to your Hugo content with ease.</p>
<h2 id="hugo-shortcode-for-callouts">Hugo shortcode for callouts</h2>
<p>Thanks to Cosimameyer’s <a href="https://cosimameyer.com/post/customized-callout-boxes-in-hugo/">tutorial</a> on implementing callouts in Hugo, we can use the following example shortcodes:</p>
<h3 id="info">Info</h3>
<pre><code>{{< callout type="info" title="Information" >}}
This is an informational callout with default styling.
{{< /callout >}}</code></pre>  
<div class="callout info">
  <div class="callout-content">
    <strong>Information</strong>
    <p>
This is an informational callout with default styling.
</p>
  </div>
</div>
<hr>
<h3 id="success">Success</h3>
<pre><code>{{< callout type="success" title="Success" >}}
Tell me more about your success story.
{{< /callout >}}</code></pre>  
<div class="callout success">
  <div class="callout-content">
    <strong>Success</strong>
    <p>
Tell me more about your success story.
</p>
  </div>
</div>
<hr>
<h3 id="error">Error</h3>
<pre><code>{{< callout type="error" title="Mistake" >}}
You're making a big mistake!
{{< /callout >}}</code></pre>  
<div class="callout error">
  <div class="callout-content">
    <strong>Mistake</strong>
    <p>
You're making a big mistake!
</p>
  </div>
</div>
<hr>
<h3 id="warning">Warning</h3>
<pre><code>{{< callout type="warning" title="Caution" >}}
You have been warned!
{{< /callout >}}</code></pre>  
<div class="callout warning">
  <div class="callout-content">
    <strong>Caution</strong>
    <p>
You have been warned!
</p>
  </div>
</div>
<hr>
<h3 id="others">Others</h3>
<pre><code>{{< callout type="nothing" title="Nothing" >}}
This is nothing!
{{< /callout >}}</code></pre>  
<div class="callout nothing">
  <div class="callout-content">
    <strong>Nothing</strong>
    <p>
This is nothing!
</p>
  </div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Building an Efficient Blogging Workflow with Hugo, Obsidian, and GitHub Pages</title>
      <link>https://deuts.org/p/build-hugo-obsidian-github-pages-workflow/</link>
      <pubDate>Wed, 13 Nov 2024 23:44:23 +0800</pubDate>
      <guid>https://deuts.org/p/build-hugo-obsidian-github-pages-workflow/</guid>
      <description>Exploring Hugo, Obsidian and Github Pages as a flexible and efficient blogging setup, focusing on low dependency and high control, with a look at potential WordPress migration challenges.</description>
      <content:encoded><![CDATA[<p>Recent controversies surrounding Matt Mullenweg and WP Engine have led me to rethink my blogging platform. While WordPress has long been a popular CMS, I’m increasingly drawn to the simplicity and control of static site generators like Hugo.</p>
<h3 id="why-consider-hugo-over-wordpress">Why Consider Hugo Over WordPress?</h3>
<p>Hugo’s performance and security benefits are difficult to ignore:</p>
<ul>
<li><strong>Performance</strong>: Hugo serves static HTML files without any backend load, delivering high-speed access.</li>
<li><strong>Security</strong>: Without a database or PHP reliance, Hugo sites inherently avoid many vulnerabilities that affect WordPress.</li>
<li><strong>Customization</strong>: Total control over templates and layouts eliminates the plugin bloat that can slow down WordPress.</li>
<li><strong>Version Control</strong>: Working with Git keeps my changes organized and easy to revert if needed.</li>
<li><strong>Low Maintenance</strong>: No frequent updates or patches—Hugo just works as-is, saving time on upkeep.</li>
</ul>
<p>Despite these advantages, I hesitated because managing content directly in Hugo, especially from the terminal, felt clunky compared to the WordPress dashboard. Using VS Code helped, but it was still missing that CMS simplicity.</p>
<h3 id="my-new-workflow-obsidian-and-hugo-with-minimal-dependencies">My New Workflow: Obsidian and Hugo with Minimal Dependencies</h3>
<p>I&rsquo;ve now found a balance that works without tying me to specific plugins that may become obsolete or unsupported. Here’s what my current workflow looks like:</p>
<ol>
<li>
<p><strong>Obsidian with Templater and Dataview Plugins</strong>:</p>
<ul>
<li>I use Obsidian for creating and editing posts, keeping my Hugo directory aligned with my Obsidian vault. With Templater, I can build posts from templates and generate shortcodes. The Dataview plugin helps me get an overview of post summaries without impacting the publishing process.</li>
<li>Notably, I’ve chosen <strong>not</strong> to use plugins like <a href="/hugo-and-obsidian-workflow/">Hugo Publish or Static Site MD Exporter</a>. Relying on such plugins could cause future complications if they’re discontinued, so I’ve kept my setup as independent as possible.</li>
</ul>
</li>
<li>
<p><strong>Building with Hugo</strong>:</p>
<ul>
<li>After editing posts, I use Hugo to generate HTML files, configured to output to a <code>docs</code> folder for simplicity.</li>
</ul>
</li>
<li>
<p><strong>Publishing to GitHub Pages</strong>:</p>
<ul>
<li>Pushing my Hugo directory, including the <code>docs</code> folder, to GitHub triggers publishing through GitHub Pages. This approach enables a completely self-managed site without relying on an external CMS.</li>
<li>If I don’t have Obsidian access, I can still edit content through GitHub’s web interface, pull the changes, run Hugo to build, and push the updated site back.</li>
</ul>
</li>
<li>
<p><strong>Direct Edit Links</strong>:</p>
<ul>
<li>For convenience, each site page includes a subtle edit button linking to the GitHub page source, making updates simple.</li>
</ul>
</li>
</ol>
<h3 id="considering-migration">Considering Migration</h3>
<p>While I’m currently set on Hugo for future posts, the complexity involved in migrating <a href="https://deuts.net/">my WordPress content</a> — nearly 900 posts and 2,500 comments — makes me pause. Migrating everything isn’t an easy task, so for now, I’m planning to blog on Hugo going forward while exploring efficient ways to gradually bring over my legacy content.</p>
<p>This workflow with Hugo, Obsidian and Github Pages has struck the right balance, letting me blog on my terms without depending on plugins or external services. Obsidian, Hugo, and GitHub all rely on Markdown, creating a seamless experience where these tools work in perfect harmony. For anyone seeking a lean, self-reliant approach to publishing, this setup might be the perfect fit.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Hugo and Obsidian workflow</title>
      <link>https://deuts.org/p/hugo-and-obsidian-workflow/</link>
      <pubDate>Tue, 12 Nov 2024 21:44:50 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-and-obsidian-workflow/</guid>
      <description>Highlights of issues with Obsidian plugins like Hugo Publish and Static Site MD Exporter when used in a Hugo blogging workflow.</description>
      <content:encoded><![CDATA[<p>When combining Obsidian with Hugo for a streamlined blogging workflow, several plugins claim to offer an easy publishing process, but some fall short due to misalignment with Hugo’s expectations. In this post, I’ll highlight some common issues with the plugins I’ve encountered.</p>
<h2 id="the-problem-with-available-obsidian-plugins">The Problem with Available Obsidian Plugins</h2>
<h3 id="hugo-publishhttpsgithubcomkirito41ddobsidian-hugo-publish"><a href="https://github.com/kirito41dd/obsidian-hugo-publish">Hugo Publish</a></h3>
<p>One plugin that attempts to bridge the gap between Obsidian and Hugo is <strong>Hugo Publish</strong>. This plugin lets you assign tags to notes, which it then processes into Markdown files that can be used with Hugo. However, there&rsquo;s a significant flaw: if you assign a <code>blog</code> tag to your notes for processing, the plugin carries this tag over to the output <code>.md</code> files. This means that every post, when built with Hugo, will include the <code>blog</code> tag, which is not only redundant but goes against the purpose of using tags as categories or topics.</p>
<p>The problem here is that <strong>Hugo Publish</strong> does not account for the need to handle tags dynamically for each post. In Hugo, tags are often used for grouping and categorization, and repeating the same tag across all posts diminishes their value.</p>
<h3 id="static-site-md-exporterhttpsgithubcomyy4382obsidian-static-site-export"><a href="https://github.com/yy4382/obsidian-static-site-export">Static Site MD Exporter</a></h3>
<p>Another plugin, <strong>Static Site MD Exporter</strong>, offers a different approach by publishing the processed <code>.md</code> files directly to GitHub. From there, you can use <code>git pull</code> to bring them into your Hugo project and build the site.</p>
<p>This plugin offers a useful feature: by adding <code>published: true</code> in the frontmatter of a note, it marks the note for processing and publishing. However, this is where things start to break down when using Hugo. The <code>published</code> property is actually an alias for <code>publishDate</code> in Hugo, which expects a date value, not a boolean. As a result, when you run the <code>hugo</code> build command, Hugo throws an error because it cannot interpret <code>published: true</code> correctly.</p>
<hr>
<h2 id="summary">Summary</h2>
<p>Both the <strong>Hugo Publish</strong> and <strong>Static Site MD Exporter</strong> plugins offer valuable functionality, but they fall short in handling tags and frontmatter properties according to Hugo’s conventions. The inability of these plugins to properly manage <code>publishDate</code> and <code>tags</code> leads to errors when building the Hugo site and creates unnecessary redundancy in post tags. These are important issues that need to be addressed in order for the workflow to function smoothly with Hugo.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to install Hugo in a Linux VPS</title>
      <link>https://deuts.org/p/hugo-linux-vps/</link>
      <pubDate>Sat, 12 Aug 2023 10:43:30 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-linux-vps/</guid>
      <description>This post explains how to install Hugo on Debian or Ubuntu. It covers installing an older version via APT, as well as installing the latest version from GitHub by downloading the .deb file, installing it, and ensuring the binary is properly copied to the /usr/bin/ directory. It also includes instructions for updating Hugo to the latest release.</description>
      <content:encoded><![CDATA[<h2 id="via-apt">Via APT</h2>
<p>If you&rsquo;re running Debian or Ubuntu on your VPS, you can actually easily install Hugo via:</p>
<pre tabindex="0"><code class="language-bin" data-lang="bin">sudo apt install hugo
</code></pre><p>However, the version you can get from the repository is so old. Mine&rsquo;s around version 0.80 I think.</p>
<h2 id="via-deb-file-from-github">Via Deb file from Github</h2>
<h3 id="download-and-run">Download and Run</h3>
<p>If you want the latest version of Hugo installed, you need to get it from <a href="https://github.com/gohugoio/hugo/releases">github</a>. As of this writing, the latest version is <a href="https://github.com/gohugoio/hugo/releases/tag/v0.117.0">v0.117.0</a>. Thus, you can run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://github.com/gohugoio/hugo/releases/download/v0.117.0/hugo_extended_0.117.0_linux-amd64.deb
</span></span><span style="display:flex;"><span>sudo dpkg -i hugo_extended_0.117.0_linux-amd64.deb
</span></span></code></pre></div><h3 id="copy-the-hugo-file">Copy the Hugo file</h3>
<p>By default, using the above method, hugo is saved under <code>/usr/local/bin</code>. You can verify that by running <code>which hugo</code> command. But this needs to be copied to the <code>/usr/bin</code> folder. Thus, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo cp /usr/local/bin/hugo /usr/bin/
</span></span></code></pre></div><h3 id="check-version">Check version</h3>
<p>You can double check if indeed you have the latest version by running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo version
</span></span></code></pre></div><h2 id="updating-hugo-to-the-latest-release">Updating Hugo to the latest release</h2>
<p>Redo all the installation instructions above including the <code>sudo cp /usr/local/bin/hugo /usr/bin/</code>  command.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
