<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cloudflare on Deuts Log</title>
    <link>https://deuts.org/t/cloudflare/</link>
    <description>Recent content in Cloudflare on Deuts Log</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>en</language>
    <copyright>2024 Deuts Log</copyright>
    <lastBuildDate>Mon, 18 Nov 2024 09:37:51 +0800</lastBuildDate>
    <atom:link href="https://deuts.org/t/cloudflare/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I Choose Cloudflare Access over Authelia/Authentik</title>
      <link>https://deuts.org/p/cloudflareaccess-vs-authelia-vs-authentik/</link>
      <pubDate>Mon, 18 Nov 2024 09:37:51 +0800</pubDate>
      <guid>https://deuts.org/p/cloudflareaccess-vs-authelia-vs-authentik/</guid>
      <description>A comparison of the complexities and risks of Authelia and Authentik with the simplicity and reliability of using Cloudflare Access for application security.</description>
      <content:encoded><![CDATA[<p>When it comes to securing your applications, the choice often boils down to what best fits your needs and resources. After exploring my options, I decided that Cloudflare Access was the right tool for the job.</p>
<h3 id="the-complexity-of-authelia-and-authentik">The Complexity of Authelia and Authentik</h3>
<p>Authelia and Authentik are robust tools for managing application security, but using them comes with several challenges:</p>
<ol>
<li><strong>Complex Setup</strong>: Setting up either solution requires multiple Docker containers—typically three or four—for just a single instance.</li>
<li><strong>Server Overhead</strong>: Running these extra containers means higher resource consumption, which can strain your server and add unnecessary maintenance.</li>
<li><strong>Single Point of Failure</strong>: These systems act as gatekeepers for your applications. If they go down, so does access to all your apps—even simple, low-risk ones. This creates a dependency that adds unnecessary risk, especially for small-scale projects.</li>
<li><strong>Time Investment</strong>: Learning to configure and maintain these systems demands significant time and effort—something not always feasible for smaller projects.</li>
</ol>
<h3 id="why-i-chose-cloudflare-access">Why I Chose Cloudflare Access</h3>
<p>Rather than spending my time managing self-hosted tools like Authelia or Authentik, I turned to Cloudflare Access. Here’s what makes it stand out:</p>
<ul>
<li><strong>Centralized Management</strong>: Cloudflare Access provides a unified dashboard to easily manage all your applications in one place.</li>
<li><strong>Straightforward Setup</strong>: There’s no need for additional containers or a complicated configuration process—just a few steps and you’re up and running.</li>
<li><strong>Domain-Level Implementation</strong>: Cloudflare Access is implemented directly at the domain or subdomain level, eliminating the need to spin up yet another Docker container to manage access. This makes it lightweight and efficient.</li>
<li><strong>Built-In Resilience</strong>: Unlike Authelia or Authentik, Cloudflare Access avoids creating a single point of failure. Cloudflare’s globally distributed infrastructure ensures that your applications remain available, even in the face of disruptions.</li>
<li><strong>Seamless Integration</strong>: It works smoothly with popular identity providers like Google Workspace and GitHub, simplifying authentication management.</li>
<li><strong>Zero Trust Security</strong>: Cloudflare Access includes powerful features like Zero Trust policies and device posture checks, ensuring only authorized users can access your applications.</li>
<li><strong>Bonus Benefits</strong>: Using Cloudflare Access means leveraging Cloudflare’s network for additional perks like DDoS protection and improved application performance.</li>
</ul>
<h3 id="why-it-might-be-right-for-you">Why It Might Be Right for You</h3>
<p>If your goal is to simplify application security without sacrificing reliability, Cloudflare Access is an excellent choice. It eliminates the complexity of self-hosted solutions, reduces server overhead, and removes the risk of losing access due to a single point of failure.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Custom Caddy Docker image with Cloudflare DNS challenge support</title>
      <link>https://deuts.org/p/caddy-docker-cloudflare-dns-challenge/</link>
      <pubDate>Fri, 15 Nov 2024 08:11:44 +0800</pubDate>
      <guid>https://deuts.org/p/caddy-docker-cloudflare-dns-challenge/</guid>
      <description>Configure a custom Caddy Docker image to use Cloudflare’s DNS challenge, securing HTTPS without exposing ports 80/443, ideal for firewall, CGNAT, and load-balancer setups.</description>
      <content:encoded><![CDATA[<p>Securing your web services with SSL/TLS certificates is crucial, especially when dealing with public servers. Using Caddy’s built-in HTTPS functionality is easy, but situations involving firewalls, CGNAT, or a lack of access to port 80/443 benefit from Cloudflare&rsquo;s DNS challenge for seamless certificate automation. This tutorial outlines how to build a custom Caddy Docker image that integrates Cloudflare’s DNS module using <code>xcaddy</code> to streamline this process.</p>
<h3 id="why-opt-for-cloudflare-dns-challenge">Why Opt for Cloudflare DNS Challenge?</h3>
<p>Caddy&rsquo;s HTTP and TLS challenges work well for most, but the DNS challenge shines when:</p>
<ul>
<li>Your server is behind a firewall or CGNAT.</li>
<li>You want to avoid exposing ports 80 and 443 to the public.</li>
<li>Your setup includes a load balancer or other restrictive networking configurations.</li>
</ul>
<p>This method authenticates your domain ownership via the Cloudflare DNS API, allowing Caddy to fetch certificates without the need for open HTTP/HTTPS ports. See <a href="#how-the-dns-challenge-works">How the DNS Challenge Works</a> for more info.</p>
<h3 id="building-a-custom-caddy-image">Building a Custom Caddy Image</h3>
<p>The Dockerfile follows a multi-stage build:</p>
<ol>
<li><strong>Builder Stage</strong>: We use <code>xcaddy</code> to compile Caddy with the Cloudflare DNS provider plugin.</li>
<li><strong>Final Stage</strong>: The resulting binary is copied to a fresh Caddy image, creating a production-ready and lean container.</li>
</ol>
<h3 id="how-to-set-up-and-run">How to Set Up and Run</h3>
<h4 id="step-1-create-a-custom-docker-network-optional">Step 1: Create a Custom Docker Network (Optional)</h4>
<p>Creating a custom Docker network keeps services isolated and minimizes the need to expose ports on your VPS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker network create caddynetwork
</span></span></code></pre></div><p>If you choose a different network name, ensure the <code>compose.yml</code> file reflects it.</p>
<h4 id="step-2-create-your-composeyml-file">Step 2: Create your <code>compose.yml</code> file</h4>
<p>Below is the <code>compose.yml</code> configuration, which builds a custom Caddy Docker image and sets up networking for enhanced security:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">caddy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">caddy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">CLOUDFLARE_API_TOKEN=&lt;ENTER YOUR TOKEN HERE&gt;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">CADDY_ACME_EMAIL=&lt;ENTER YOUR EMAIL HERE&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;80:80&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;443:443&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./Caddyfile:/etc/caddy/Caddyfile</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./data:/data</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./config:/config</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">caddynetwork</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">caddynetwork</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><h4 id="step-3-configure-composeyml">Step 3: Configure <code>compose.yml</code></h4>
<p>Rename <code>_compose.yml</code> to <code>compose.yml</code> and set your environment variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">CLOUDFLARE_API_TOKEN=&lt;YOUR_TOKEN&gt;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">CADDY_ACME_EMAIL=&lt;YOUR_EMAIL&gt;</span>
</span></span></code></pre></div><ul>
<li><strong>CLOUDFLARE_API_TOKEN</strong>: Ensure this token has permissions for DNS zone edits on Cloudflare.</li>
<li><strong>CADDY_ACME_EMAIL</strong>: This email will be used by ACME for certificate registration.</li>
</ul>
<h4 id="step-4-build-and-run">Step 4: Build and Run</h4>
<p>Use Docker Compose to build and start the container in detached mode:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose up -d --build
</span></span></code></pre></div><h4 id="step-5-edit-your-caddyfile">Step 5: Edit Your Caddyfile</h4>
<p>Adjust your <code>Caddyfile</code> with the necessary domain and service details. Here’s a sample:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-caddy" data-lang="caddy"><span style="display:flex;"><span>example.com {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">reverse_proxy</span> localhost:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">tls</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">dns</span> <span style="color:#e6db74">cloudflare</span> <span style="color:#ae81ff">{env.CLOUDFLARE_API_TOKEN}</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Replace <code>example.com</code> with your actual domain.</li>
<li>Set <code>localhost</code> to the name or IP of your backend service.</li>
<li>Adjust <code>8080</code> to the port where your application runs.</li>
</ul>
<p>With this setup, Caddy will use Cloudflare’s DNS challenge to obtain certificates, keeping your services secure without exposing common HTTP/HTTPS ports.</p>
<hr>
<h3 id="how-the-dns-challenge-works">How the DNS Challenge Works</h3>
<p>Typically, to issue an SSL/TLS certificate, Caddy (or any Certificate Authority, CA) needs to verify that you actually own the domain in question. Normally, this is done by:</p>
<ol>
<li><strong>HTTP Challenge</strong>: Verifying domain ownership by placing a file on an accessible web server running on port 80.</li>
<li><strong>TLS-ALPN Challenge</strong>: Verifying via a specific response from a server running on port 443.</li>
</ol>
<p>However, both these methods require public access to specific ports on the server (80 or 443), which may not be feasible if:</p>
<ul>
<li><strong>Your server is behind a firewall</strong> or behind Carrier-Grade NAT (CGNAT) on a network that doesn’t expose external ports.</li>
<li><strong>You don’t want to expose ports 80 and 443 publicly</strong> for security or regulatory reasons.</li>
<li><strong>You’re using a load balancer</strong> or reverse proxy setup where ports may not map directly to a specific server.</li>
</ul>
<h3 id="why-the-cloudflare-dns-challenge-solves-this">Why the Cloudflare DNS Challenge Solves This</h3>
<p>The <strong>DNS challenge</strong> verifies domain ownership by checking for specific DNS records instead of requiring public access to your server. Here’s how it works:</p>
<ol>
<li><strong>Caddy uses Cloudflare’s API to add a special TXT record to your domain’s DNS settings</strong> (hosted on Cloudflare).</li>
<li><strong>The CA (e.g., Let’s Encrypt) queries Cloudflare’s DNS servers</strong> for the TXT record to verify domain ownership.</li>
<li>Once verified, the CA issues a certificate to Caddy for your domain, which it saves and manages.</li>
</ol>
<p>Because the DNS challenge doesn’t involve your server’s IP address or port accessibility, it allows Caddy to obtain certificates even when direct access to your server is restricted.</p>
<h3 id="why-you-need-cloudflare-api-permissions">Why You Need Cloudflare API Permissions</h3>
<p>The DNS challenge requires dynamically creating and removing DNS records on your domain during each certificate renewal. By providing Caddy with Cloudflare’s API token, you enable it to manage the necessary DNS records for verification, fully automating the certificate issuance and renewal process without exposing any ports.</p>
<p>In summary, <strong>the Cloudflare DNS challenge is essential</strong> when public port access is unavailable or undesirable. It’s a robust way to automate certificate management, especially in complex network environments, by verifying domain ownership through DNS rather than HTTP or TLS ports.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Checklist of things to do on a new VPS server</title>
      <link>https://deuts.org/p/new-vps-checklist/</link>
      <pubDate>Sun, 13 Aug 2023 16:40:41 +0800</pubDate>
      <guid>https://deuts.org/p/new-vps-checklist/</guid>
      <description>This guide walks through the process of setting up a fresh Linux system and installing essential tools, Docker, Docker Compose, Cloudflare Tunnel, Portainer, and Duplicati. It includes instructions for updating the system, changing the root password, adding a non-root user, setting the timezone, and installing Docker. Additionally, it provides detailed steps for configuring Docker containers for Cloudflare Tunnel, Portainer (for managing Docker containers), and Duplicati (for backup), all set up with a cloudflared network bridge to securely expose the apps.</description>
      <content:encoded><![CDATA[<h2 id="update-the-system">Update the system</h2>
<p>From this moment, we&rsquo;ll assume you&rsquo;re still logged in as <code>root</code>. After all, this is a fresh install of Linux, right?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt update
</span></span><span style="display:flex;"><span>apt upgrade -y
</span></span></code></pre></div><h2 id="install-essential-utilities">Install essential utilities</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt install sudo htop curl nano wget net-tools
</span></span></code></pre></div><h2 id="change-root-password">Change root password</h2>
<p>This is just in case you don&rsquo;t think the assigned root password is not complex enough for your liking:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>passwd
</span></span></code></pre></div><p>Then enter you new password twice.</p>
<h2 id="update-timezone">Update Timezone</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dpkg-reconfigure tzdata
</span></span></code></pre></div><h2 id="add-non-root-user">Add non-root user</h2>
<h3 id="add-user">Add user</h3>
<p>Change <code>username</code> with the username of your choice:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>adduser username
</span></span></code></pre></div><h3 id="add-user-to-sudoers-group">Add user to sudoers group</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>usermod -aG sudo username
</span></span></code></pre></div><p>So, the non-root user is ready. From this moment on, we&rsquo;ll assume you&rsquo;re logged as that non-root user.</p>
<h2 id="change-the-hostname">Change the hostname</h2>
<h3 id="edit-etchostname">Edit <code>/etc/hostname</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo nano /etc/hostname
</span></span></code></pre></div><p>And change accordingly.</p>
<h3 id="edit-etchosts">Edit <code>/etc/hosts</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo nano /etc/hosts
</span></span></code></pre></div><p>And change accordingly.</p>
<h3 id="reboot">Reboot</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo reboot
</span></span></code></pre></div><h2 id="install-docker-and-docker-compose">Install Docker and Docker Compose</h2>
<h3 id="install-docker">Install Docker</h3>
<p>Follow the instructions applicable for your system from the official Docker <a href="https://docs.docker.com/engine/install/">documentation</a>. My favorite systems are <a href="https://docs.docker.com/engine/install/ubuntu/">Ubuntu</a> and <a href="https://docs.docker.com/engine/install/debian/">Debian</a>, and I actually prefer to use the <a href="https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository">install using the repository</a> method:</p>
<h4 id="set-up-dockers-apt-repository">Set up Docker&rsquo;s Apt repository</h4>
<h5 id="for-ubuntu">For Ubuntu</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Add Docker&#39;s official GPG key:</span>
</span></span><span style="display:flex;"><span>sudo apt-get update
</span></span><span style="display:flex;"><span>sudo apt-get install ca-certificates curl gnupg
</span></span><span style="display:flex;"><span>sudo install -m <span style="color:#ae81ff">0755</span> -d /etc/apt/keyrings
</span></span><span style="display:flex;"><span>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
</span></span><span style="display:flex;"><span>sudo chmod a+r /etc/apt/keyrings/docker.gpg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add the repository to Apt sources:</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  <span style="color:#e6db74">&#34;deb [arch=&#34;</span><span style="color:#66d9ef">$(</span>dpkg --print-architecture<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;</span><span style="color:#66d9ef">$(</span>. /etc/os-release <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;</span>$VERSION_CODENAME<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34; stable&#34;</span> | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span><span style="display:flex;"><span>sudo apt-get update
</span></span></code></pre></div><h5 id="for-debian">For Debian</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Add Docker&#39;s official GPG key:</span>
</span></span><span style="display:flex;"><span>sudo apt-get update
</span></span><span style="display:flex;"><span>sudo apt-get install ca-certificates curl gnupg
</span></span><span style="display:flex;"><span>sudo install -m <span style="color:#ae81ff">0755</span> -d /etc/apt/keyrings
</span></span><span style="display:flex;"><span>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
</span></span><span style="display:flex;"><span>sudo chmod a+r /etc/apt/keyrings/docker.gpg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add the repository to Apt sources:</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  <span style="color:#e6db74">&#34;deb [arch=&#34;</span><span style="color:#66d9ef">$(</span>dpkg --print-architecture<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;</span><span style="color:#66d9ef">$(</span>. /etc/os-release <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;</span>$VERSION_CODENAME<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34; stable&#34;</span> | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span><span style="display:flex;"><span>sudo apt-get update
</span></span></code></pre></div><h4 id="install-the-docker-packages">Install the Docker packages</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</span></span></code></pre></div><h3 id="install-docker-compose">Install Docker Compose</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install docker-compose
</span></span></code></pre></div><h2 id="add-user-to-the-docker-group">Add user to the Docker group</h2>
<ul>
<li>Check if docker group already exists: <code>grep docker /etc/group</code></li>
<li>Add user to the docker group: <code>usermod -aG docker username</code> (don&rsquo;t forget to change <code>username</code> to the username of your choice)</li>
</ul>
<h2 id="create-a-network-bridge-for-docker-containers">Create a network bridge for Docker Containers</h2>
<p>From now on, the instructions here is if you plan to expose your applications via Cloudflare Tunnel.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker network create -d bridge cloudflared
</span></span></code></pre></div><h2 id="install-cloudflare-tunnel">Install Cloudflare Tunnel</h2>
<ul>
<li>Make a directory: <code>mkdir appdata/cloudflared</code> <em>(the directory structure is up to you)</em></li>
<li>CD to that directory: <code>cd appdata/cloudflared</code></li>
<li>Create the <code>docker-compose.yml</code> file: <code>nano docker-compose.yml</code></li>
</ul>
<p>Then paste the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3.3&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tunnel</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">cloudflared-tunnel</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">cloudflare/cloudflared</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">command</span>: <span style="color:#ae81ff">tunnel --no-autoupdate run</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TUNNEL_TOKEN=[paste_here_your_actual_token]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">cloudflared</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">cloudflared</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>Don&rsquo;t forget to paste your actual token that will be generated when you create a new tunnel in Cloudflare.</p>
<h2 id="install-portainer">Install Portainer</h2>
<h3 id="via-docker-compose">Via Docker Compose</h3>
<p>Same as above, mkdir for portainer, then create the <code>docker-compose.yml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">portainer</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">portainer/portainer-ce:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">portainer</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=Asia/Manila</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/var/run/docker.sock:/var/run/docker.sock</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./data:/data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#    ports:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#      - 9000:9000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#      - 8000:8000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#      - 9443:9443</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">cloudflared</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cloudflared</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>Note that I commented out the ports portion of the <code>docker-compose.yml</code> because we&rsquo;re not exposing the ports to the internet. Instead, we&rsquo;re using Cloudflare Tunnel to expose the apps.</p>
<h2 id="install-duplicati">Install Duplicati</h2>
<p>All these efforts you do to set up Docker containers will go to waste if you don&rsquo;t do a proper backup of your config and data files.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;2.1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">duplicati</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">lscr.io/linuxserver/duplicati:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">duplicati</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=0</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=0</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=America/Denver</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./config:/config</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./backups:/backups</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/home/username:/source</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#    ports:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#      - 8200:8200</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">cloudflared</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cloudflared</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>I prefer to run Duplicati as root so I won&rsquo;t have to deal with read permission issues in the future, so I set <code>PUID</code> and <code>PGID</code> to <code>0</code>. Needless to say, you have to change your <code>TZ</code> and your <code>source folder</code> to map to the container.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
