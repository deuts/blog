<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Document-Management on Deuts Log</title>
    <link>https://deuts.org/t/document-management/</link>
    <description>Recent content in Document-Management on Deuts Log</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <copyright>2024 Deuts Log</copyright>
    <lastBuildDate>Tue, 03 Dec 2024 11:16:34 +0800</lastBuildDate>
    <atom:link href="https://deuts.org/t/document-management/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Contemplating a Switch from Paperless NGX to PDFDing</title>
      <link>https://deuts.org/p/switch-paperless-ngx-pdfding/</link>
      <pubDate>Tue, 03 Dec 2024 11:16:34 +0800</pubDate>
      <guid>https://deuts.org/p/switch-paperless-ngx-pdfding/</guid>
      <description>A personal reflection on the features and limitations of Paperless NGX and PDFDing as I consider simplifying my document management system.</description>
      <content:encoded><![CDATA[<p>I’ve been running <a class="applink" href="https://deuts.org/a/paperless-ngx" target="_blank">Paperless NGX</a> as my document management tool for a while now, but lately, I’ve started wondering if a simpler solution like <a class="applink" href="https://deuts.org/a/pdfding" target="_blank">PDFDing</a> might be better suited for my needs. Both tools have their strengths and weaknesses, so I’ve been testing them side by side to see how they compare.</p>
<h3 id="paperless-ngx-great-features-but-too-much">Paperless NGX: Great Features, but Too Much?</h3>
<p><a href="https://github.com/paperless-ngx/paperless-ngx">Paperless NGX</a> has a lot going for it:</p>
<ul>
<li><strong>Organizes &amp; Tags Documents</strong>: Scan and categorize documents with custom tags, correspondents, types, and more for easy retrieval.</li>
<li><strong>OCR &amp; Multi-Language Support</strong>: Performs OCR on scanned documents, making them searchable. Supports over 100 languages via the Tesseract engine.</li>
<li><strong>Local Data Storage &amp; Security</strong>: Your data is stored securely on your own server, with no transmission or sharing of your files.</li>
<li><strong>PDF/A Format for Long-Term Storage</strong>: Documents are saved in PDF/A format, designed for long-term storage, alongside the original files.</li>
<li><strong>Machine Learning for Metadata</strong>: Automatically tags documents with correspondents and document types, streamlining organization.</li>
<li><strong>Supports Multiple File Types</strong>: Supports PDFs, images, Office documents (Word, Excel, PowerPoint), and more.</li>
<li><strong>Modern Web Interface</strong>: Features a customizable dashboard, filtering options, drag-and-drop uploads, and customizable views. It also supports custom fields and shareable public links.</li>
<li><strong>Powerful Search &amp; Auto-Suggestions</strong>: Full-text search, autocomplete, relevance-based sorting, and document highlighting make finding files efficient.</li>
<li><strong>Email Processing</strong>: Import and process documents directly from email accounts with customizable rules for actions such as marking as read or deleting.</li>
<li><strong>Consume Folder</strong>: Automatically processes documents dropped into a designated folder, making it easy to quickly add documents to the system without manual uploads.</li>
<li><strong>Multi-User Permissions &amp; Workflow</strong>: A robust permissions system, with global and per-document access control, and a powerful workflow system for advanced management.</li>
<li><strong>Optimized for Performance</strong>: Utilizes multi-core systems for parallel document processing and includes an integrated sanity checker to ensure document archive health.</li>
</ul>
<p>However, these features come with some drawbacks:</p>
<ol>
<li><strong>High Memory Usage</strong>: Paperless NGX uses about 1.4 GB of memory even when it’s idle. On a system with 11 GB of RAM, this is noticeable.</li>
<li><strong>Machine Learning Accuracy</strong>: Predictions are inconsistent. Correspondent and document type are about 50% accurate, and creation date predictions are wrong 80% of the time.</li>
<li><strong>Custom Fields</strong>: While you can create custom fields, they don’t appear by default and need to be enabled manually for every new document.</li>
<li><strong>Editing Limitations</strong>: Updating metadata for multiple documents is cumbersome since each document must be opened individually. A grid-style interface, similar to Airtable or spreadsheet apps, for faster and more efficient bulk editing would have been much better.</li>
</ol>
<h3 id="pdfding-simple-lightweight-and-efficient">PDFDing: Simple, Lightweight, and Efficient</h3>
<p><a href="https://github.com/mrmn2/PdfDing">PDFDing</a> takes a minimalist approach, using tags instead of multiple metadata fields. Its design is sleek and straightforward, similar to tools like <a class="applink" href="https://deuts.org/a/linkding" target="_blank">Linkding</a>, which I already use and appreciate.</p>
<p>One of the biggest advantages of PDFDing is how light it is on system resources. It uses only about 156 MB of memory on average, a fraction of what Paperless NGX demands.</p>
<p>Additionally, a standout feature of PDFDing is its ease of use on both desktop and mobile devices. When opening a document in the web app on a mobile browser, it’s displayed directly in the browser without triggering a download. This saves storage space and avoids cluttering your downloads folder with duplicate files if you repeatedly access the same document. In contrast, Paperless NGX downloads the file each time it’s viewed in full-page mode on mobile browsers, which can quickly become messy.</p>
<h3 id="whats-missing-in-pdfding">What’s Missing in PDFDing</h3>
<p>Despite its simplicity, PDFDing isn’t perfect. The biggest feature I miss is Paperless NGX’s <strong>consume folder</strong>, which makes it easy to add and organize documents automatically. If PDFDing could implement this, it would make the decision to switch much easier.</p>
<h3 id="resource-usage-comparison">Resource Usage Comparison</h3>
<p>To give some context, I’m running these tools on a system with 11 GB of RAM. Here’s how they compare in terms of system resource usage over the past week:</p>
<h4 id="paperless-ngx">Paperless NGX</h4>
<table>
  <thead>
      <tr>
          <th>Container Name</th>
          <th>AveCPU</th>
          <th>AveMem (MiB)</th>
          <th>AveMem%</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>paperless-webserver</td>
          <td>7.10%</td>
          <td>1155.12</td>
          <td>10.53%</td>
      </tr>
      <tr>
          <td>paperless-tika</td>
          <td>0.26%</td>
          <td>277.51</td>
          <td>2.53%</td>
      </tr>
      <tr>
          <td>paperless-gotenberg</td>
          <td>0.06%</td>
          <td>6.63</td>
          <td>0.06%</td>
      </tr>
      <tr>
          <td>paperless-redis</td>
          <td>0.39%</td>
          <td>4.78</td>
          <td>0.04%</td>
      </tr>
      <tr>
          <td><strong>Total</strong></td>
          <td><strong>7.81%</strong></td>
          <td><strong>1444.05</strong></td>
          <td><strong>13.17%</strong></td>
      </tr>
  </tbody>
</table>
<h4 id="pdfding">PDFDing</h4>
<table>
  <thead>
      <tr>
          <th>Container Name</th>
          <th>AveCPU</th>
          <th>AveMem (MiB)</th>
          <th>AveMem%</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>pdfding</td>
          <td>0.02%</td>
          <td>156.36</td>
          <td>1.43%</td>
      </tr>
      <tr>
          <td><strong>Total</strong></td>
          <td><strong>0.02%</strong></td>
          <td><strong>156.36</strong></td>
          <td><strong>1.43%</strong></td>
      </tr>
  </tbody>
</table>
<h3 id="final-thoughts">Final Thoughts</h3>
<p>Right now, I’m undecided. Paperless NGX has powerful features but can feel over-engineered and resource-hungry. PDFDing is minimalist and efficient but lacks some key features I rely on.</p>
<p>For now, I’ll keep running both systems and see how PDFDing fits into my workflow. If it can streamline document management without too many compromises, it might be worth switching.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
