<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Power-Query on Deuts Log</title>
    <link>https://deuts.org/t/power-query/</link>
    <description>Recent content in Power-Query on Deuts Log</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>en</language>
    <copyright>2024 Deuts Log</copyright>
    <lastBuildDate>Sat, 30 Nov 2024 15:00:52 +0800</lastBuildDate>
    <atom:link href="https://deuts.org/t/power-query/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unlocking New Power Query Tricks</title>
      <link>https://deuts.org/p/new-power-query-tricks/</link>
      <pubDate>Sat, 30 Nov 2024 15:00:52 +0800</pubDate>
      <guid>https://deuts.org/p/new-power-query-tricks/</guid>
      <description>A quick reflection on my Power Query journey and a must-watch video showcasing the latest tricks to enhance workflows.  </description>
      <content:encoded><![CDATA[<p>I consider myself somewhere between intermediate and advanced in Power Query, but there&rsquo;s always more to learn. One of the things I enjoy most is discovering new tricks to incorporate into my workflow.</p>
<p>Recently, I watched the latest <strong>Power Query Tricks Battle</strong> video by Goodly on YouTube, featuring Melissa de Korte and Rick de Groot. It’s packed with creative techniques that can take your Power Query game to the next level.</p>
<p>It’s a shame Melissa’s mic quality wasn’t the best (perhaps she used a built-in laptop mic), but I’m confident her tricks were outstanding.</p>
<p>Watch the video below and tell me if you learned something new, what tricks are you most excited about to try out in your projects, and which of the tricks featured is your favorite?</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/iixGowsOUmE?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>
    <div class="yt-separator">&nbsp;</div>

]]></content:encoded>
    </item>
    <item>
      <title>Power Query Calendar Table</title>
      <link>https://deuts.org/p/power-query-calendar-table/</link>
      <pubDate>Tue, 19 Nov 2024 09:19:01 +0800</pubDate>
      <guid>https://deuts.org/p/power-query-calendar-table/</guid>
      <description>Discover the importance of a calendar table in data modeling and how it simplifies date-based analysis, advanced calculations, and filtering. Struggling with DAX bugs? Power Query offers a robust alternative for generating a dynamic calendar table effortlessly.</description>
      <content:encoded><![CDATA[<p>A <strong>calendar table</strong> is an essential component of effective data modeling. It serves as a centralized hub for date-related calculations, enabling analysts to unlock powerful insights while maintaining a clean and organized model.</p>
<h2 id="purpose-of-a-calendar-table">Purpose of a Calendar Table</h2>
<ul>
<li><strong>Date-based Analysis</strong>: A calendar table allows for consistent time-based aggregations, such as year-to-date (YTD), quarter-over-quarter (QoQ), and month-over-month (MoM) comparisons.</li>
<li><strong>Handling Complex Calculations</strong>: Advanced calculations like working days, fiscal calendars, or custom holidays become easier with a well-structured calendar table.</li>
<li><strong>Seamless Filtering</strong>: Calendar tables provide a single source of truth for date filtering across related tables, ensuring accuracy.</li>
<li><strong>Improved Performance</strong>: Predefined relationships between the calendar and fact tables improve query performance and reduce the need for repeated calculations.</li>
</ul>
<h2 id="creating-calendar-table-in-power-query">Creating Calendar Table in Power Query</h2>
<p>In my Excel workflow, I encountered an unusual bug while generating a Calendar table with DAX, possibly related to differences in date formats (mm/dd/yyyy vs. dd/mm/yyyy). Because of this, I prefer using Power Query to create Calendar tables. If you feel the same way, here’s the code to generate a dynamic Calendar table:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>    StartDate <span style="color:#f92672">=</span> <span style="color:#66d9ef">#date</span>(<span style="color:#ae81ff">2022</span><span style="color:#f92672">,</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    EndDate <span style="color:#f92672">=</span> <span style="color:#66d9ef">#date</span>(<span style="color:#ae81ff">2023</span><span style="color:#f92672">,</span><span style="color:#ae81ff">12</span><span style="color:#f92672">,</span><span style="color:#ae81ff">31</span>)<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    Source <span style="color:#f92672">=</span> List.Dates(StartDate<span style="color:#f92672">,</span>Duration.Days(EndDate<span style="color:#f92672">-</span>StartDate)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#66d9ef">#duration</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">0</span><span style="color:#f92672">,</span><span style="color:#ae81ff">0</span><span style="color:#f92672">,</span><span style="color:#ae81ff">0</span>))<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    ExpandDate <span style="color:#f92672">=</span> Table.TransformColumnTypes(Table.RenameColumns(Table.FromList(Source<span style="color:#f92672">,</span> Splitter.SplitByNothing()<span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">,</span> ExtraValues.Error)<span style="color:#f92672">,</span>{{<span style="color:#e6db74">&#34;Column1&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Date&#34;</span>}})<span style="color:#f92672">,</span>{{<span style="color:#e6db74">&#34;Date&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">type</span> date}})<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    InsertYear <span style="color:#f92672">=</span> Table.AddColumn(ExpandDate<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Year&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">each</span> Date.Year([Date])<span style="color:#f92672">,</span> Int64.Type)<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    InsertMonNum <span style="color:#f92672">=</span> Table.AddColumn(InsertYear<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;MonNum&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">each</span> Date.Month([Date])<span style="color:#f92672">,</span> Int64.Type)<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    InsertMonth <span style="color:#f92672">=</span> Table.AddColumn(InsertMonNum<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Month&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">each</span> Text.Start(Date.MonthName([Date])<span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span>)<span style="color:#f92672">,</span> <span style="color:#66d9ef">type</span> text)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    InsertMonth
</span></span></code></pre></div><h3 id="how-to-use-this-code">How to Use This Code:</h3>
<ol>
<li>Paste it into Power Query’s Advanced Editor.</li>
<li>Adjust the <code>StartDate</code> and <code>EndDate</code> to fit your needs.</li>
<li>Load the table into your model.</li>
</ol>
<hr>
<p>By incorporating a calendar table into your data model, you gain the ability to perform more advanced and precise analysis while streamlining your workflow. Whether you use DAX or Power Query, the results will elevate the power and efficiency of your reporting.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Using List.Generate to Generate Running Total Column in Power Query</title>
      <link>https://deuts.org/p/list-generate-running-total/</link>
      <pubDate>Tue, 19 Mar 2024 21:23:57 +0800</pubDate>
      <guid>https://deuts.org/p/list-generate-running-total/</guid>
      <description>Here’s a quicker, cleaner way to generate a running total in Power Query—no need for complex formulas or multiple steps! With this streamlined approach, you can set up a cumulative total in record time, saving both processing power and patience. Say goodbye to endless column configurations and hello to efficiency!</description>
      <content:encoded><![CDATA[<p>I&rsquo;m just leaving this here for my future reference. This is the faster way to generate running total in Power Query.</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/RIvKaqGGB3w?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>
    <div class="yt-separator">&nbsp;</div>

<p>Though, I think this next video has more useful code process:</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/7kFZw8zimCU?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>
    <div class="yt-separator">&nbsp;</div>

]]></content:encoded>
    </item>
    <item>
      <title>Power Query Table.Skip While Row Is Blank</title>
      <link>https://deuts.org/p/power-query-table-skip-while-row-is-blank/</link>
      <pubDate>Sun, 23 Jul 2023 17:36:50 +0800</pubDate>
      <guid>https://deuts.org/p/power-query-table-skip-while-row-is-blank/</guid>
      <description>This post explains how to use the Table.Skip function in Power Query to dynamically skip rows with null values in a specified column, making the process flexible across files.</description>
      <content:encoded><![CDATA[<p>There are times that you you want to use the Table.Skip Power Query function, but the number of rows you want to skip varies from file to file in your folder. You want the number of rows to be dynamic.</p>
<p>The function below will count the number of rows under the column <code>Column4</code> while the rows are nulls.</p>
<pre tabindex="0"><code>Table.Skip(Source, each [Column4] = null)
</code></pre><p>Watch the <a href="https://youtu.be/A5KxZhuwhv4?t=269">video</a>.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
