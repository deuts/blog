<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docker on Deuts Log</title>
    <link>https://deuts.org/t/docker/</link>
    <description>Recent content in Docker on Deuts Log</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <copyright>2024 Deuts Log</copyright>
    <lastBuildDate>Wed, 04 Dec 2024 11:16:48 +0800</lastBuildDate>
    <atom:link href="https://deuts.org/t/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why is Running Mastodon via Docker So Complicated?</title>
      <link>https://deuts.org/x/running-mastodon-via-docker-complicated/</link>
      <pubDate>Wed, 04 Dec 2024 11:16:48 +0800</pubDate>
      <guid>https://deuts.org/x/running-mastodon-via-docker-complicated/</guid>
      <description>A rant about the convoluted process of setting up Mastodon using Docker and the frustration of dealing with multiple dependencies and configurations.</description>
      <content:encoded><![CDATA[<p>I&rsquo;m wishing I could host my own Mastodon instance, but setting it up with Docker is unnecessarily complicated. There are countless dependencies to handle, multiple services to configure, and numerous potential points of failure. For a platform of its size, you&rsquo;d expect a more straightforward, user-friendly Docker setup, but it&rsquo;s anything but. Why is this process so difficult to get right?</p>
]]></content:encoded>
    </item>
    <item>
      <title>Enclosed could be the best PrivateBin replacement</title>
      <link>https://deuts.org/p/enclosed-privatebin-alternative/</link>
      <pubDate>Wed, 27 Nov 2024 00:13:09 +0800</pubDate>
      <guid>https://deuts.org/p/enclosed-privatebin-alternative/</guid>
      <description>My thoughts on Enclosed, a minimalistic and secure web app for private note sharing, and why it’s a strong contender to replace PrivateBin in my workflow. </description>
      <content:encoded><![CDATA[<p><strong><a href="https://github.com/CorentinTh/enclosed">Enclosed</a></strong> is a minimalistic web application designed for sending private and secure notes.</p>
<p>All notes are end-to-end encrypted, ensuring that the server and storage have zero knowledge of the content. You can set a password, define an expiration period (TTL), and choose to have the note self-destruct after being read.</p>
<h3 id="a-promising-alternative-to-privatebin">A Promising Alternative to PrivateBin</h3>
<p>I’ve been using <a class="applink" href="https://deuts.org/a/privatebin" target="_blank">PrivateBin</a> for secure note sharing, but its outdated interface often left me wishing for a modernized alternative. <a class="applink" href="https://deuts.org/a/enclosed" target="_blank">Enclosed</a>, with its elegant default dark theme and minimalist design, feels like a breath of fresh air.</p>
<p>While I haven’t completely switched yet, I’m seriously contemplating making Enclosed my primary tool. It addresses several pain points I had with PrivateBin, such as:</p>
<ol>
<li><strong>A Modern, Elegant Interface:</strong> Enclosed stays true to its design philosophy, providing a clean and visually appealing experience.</li>
<li><strong>Improved Reliability:</strong> I often faced issues with PrivateBin where pastes would disappear after upgrades. I’m optimistic that Enclosed won’t suffer from the same problem, given its well-thought-out implementation.</li>
</ol>
<h3 id="features-that-won-me-over">Features That Won Me Over</h3>
<p>Two recent updates in the last month to Enclosed particularly impressed me:</p>
<ol>
<li><strong>Restricting Note Creation to Logged-In Users:</strong> This feature adds an extra layer of control, making the platform more secure.</li>
<li><strong>No Expiration Option:</strong> Previously, expiration periods were limited to 1 hour, 1 day, 1 week, or 1 month. Now, I can set notes to never expire, which is perfect for more persistent needs.</li>
</ol>
<p>These enhancements show the developer’s commitment to refining the app and meeting user needs, making Enclosed a very attractive alternative.</p>
<h3 id="my-wishlist-for-enclosed">My Wishlist for Enclosed</h3>
<p>While Enclosed has been a joy to use so far, there are a few features I’d love to see added:</p>
<ol>
<li><strong>Deleting Shared Notes:</strong> As a logged-in user, I’d like the option to delete notes I’ve shared, provided I know the key.</li>
<li><strong>More Formatting Options:</strong> Just like PrivateBin allows formatting pastes as markdown, plaintext, or source code, I hope Enclosed adds similar options—and ideally, supports even more formats.</li>
</ol>
<h3 id="final-thoughts">Final Thoughts</h3>
<p>Enclosed isn’t just a potential replacement for PrivateBin—it could become the best tool for secure note sharing. While I’m still evaluating it, the updates and overall experience have made a strong case for switching for good.</p>
<p>If you’re exploring alternatives for PrivateBin or looking for a secure, modern solution for note sharing, Enclosed is definitely worth a try.</p>
]]></content:encoded>
    </item>
    <item>
      <title>To Portchecker or not?</title>
      <link>https://deuts.org/x/to-portchecker-or-not/</link>
      <pubDate>Tue, 26 Nov 2024 16:59:48 +0800</pubDate>
      <guid>https://deuts.org/x/to-portchecker-or-not/</guid>
      <description>&lt;div class=&#34;post-entry&#34;&gt;
    &lt;a href=&#34;https://www.youtube.com/watch?v=0EgbXY0ZaeU&#34; target=&#34;_blank&#34; class=&#34;linkcard-wrapper&#34;&gt;
      &lt;div class=&#34;linkcard-content&#34;&gt;
        &lt;h3 class=&#34;linkcard-title&#34;&gt;PortChecker - Check for Open Ports EASILY&lt;/h3&gt;
        &lt;p class=&#34;linkcard-description&#34;&gt;Learn how to self-host portchecker.io using a Docker container! This handy tool allows you to check the port status of any hostname or IP address, which is essential for managing port forwarding and network security.  In this video, we&amp;#39;ll walk you through the entire process, from downloading the Docker image to accessing your own private instance of portchecker.io.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  
&lt;p&gt;Honestly, I’m not sure why you&amp;rsquo;d bother self-hosting &lt;a class=&#34;applink&#34; href=&#34;https://deuts.org/a/portchecker&#34; target=&#34;_blank&#34;&gt;PortChecker&lt;/a&gt;—it&amp;rsquo;s just a tool to check your server&amp;rsquo;s port status. You can easily use the &lt;a href=&#34;https://portchecker.io/&#34;&gt;website&lt;/a&gt; for that. It’s not like it’s going to keep tabs on your ports 24/7, so unless you’re on a mission to host &lt;em&gt;everything&lt;/em&gt; yourself, this might be a bit much!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div class="post-entry">
    <a href="https://www.youtube.com/watch?v=0EgbXY0ZaeU" target="_blank" class="linkcard-wrapper">
      <div class="linkcard-content">
        <h3 class="linkcard-title">PortChecker - Check for Open Ports EASILY</h3>
        <p class="linkcard-description">Learn how to self-host portchecker.io using a Docker container! This handy tool allows you to check the port status of any hostname or IP address, which is essential for managing port forwarding and network security.  In this video, we&#39;ll walk you through the entire process, from downloading the Docker image to accessing your own private instance of portchecker.io.</p>
      </div>
    </a>
  </div>
  
<p>Honestly, I’m not sure why you&rsquo;d bother self-hosting <a class="applink" href="https://deuts.org/a/portchecker" target="_blank">PortChecker</a>—it&rsquo;s just a tool to check your server&rsquo;s port status. You can easily use the <a href="https://portchecker.io/">website</a> for that. It’s not like it’s going to keep tabs on your ports 24/7, so unless you’re on a mission to host <em>everything</em> yourself, this might be a bit much!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Why I Prefer SQLite-Only Docker Services</title>
      <link>https://deuts.org/p/why-sqlite-docker/</link>
      <pubDate>Wed, 20 Nov 2024 13:20:59 +0800</pubDate>
      <guid>https://deuts.org/p/why-sqlite-docker/</guid>
      <description>SQLite’s embedded nature eliminates the need for complex client-server setups, reducing overhead and simplifying Docker configurations. It’s lightweight, fast, and easy to set up, making it an ideal choice for solo users and low-traffic applications.</description>
      <content:encoded><![CDATA[<p>When setting up Docker containers, choosing the one with minimal setup can significantly affect the overall performance, complexity, and maintenance requirements of your services. For many use cases, especially when I’m the sole user of the system, I find that SQLite is the perfect database choice. Here&rsquo;s why:</p>
<ul>
<li><strong>Minimal Number of Containers</strong> – SQLite doesn’t require a separate database server, which keeps the setup minimal. Fewer containers mean less complexity, making the Docker environment easier to maintain and monitor.</li>
<li><strong>I’m the Only User Most of the Time</strong> – SQLite is embedded into the application, so there’s no need for complex client-server systems when I’m the only user. This makes it a perfect fit for small-scale, low-traffic use cases.</li>
<li><strong>Lightweight, Fast, and Easy to Set Up</strong> – SQLite is lightweight and fast, with no server to configure or maintain. The database is stored in a single file, making setup quick and Docker Compose files easier to manage.</li>
<li><strong>Reduced Maintenance and Overhead</strong> – Without the need for database clustering, replication, or scaling, SQLite simplifies maintenance. I only need to manage one file and ensure backups are in place.</li>
<li><strong>Portability and Flexibility</strong> – SQLite databases are stored as single files, so they can be easily moved, backed up, or transferred between environments without complex configurations or network dependencies.</li>
<li><strong>Less Network Overhead</strong> – Since SQLite runs locally, there’s no need for network communication, resulting in faster response times and reduced network overhead compared to client-server databases.</li>
</ul>
<p>Whenever I’m presented with multiple Docker services that serve the same purpose, or when an SQLite-only option is available, I usually prefer SQLite. Case in point: <a href="/p/medama-vs-google-analytics/">Why I chose Medama</a>. It&rsquo;s simple and fulfills my needs without the overhead of managing an additional database server, making it perfect for personal projects, prototypes, and low-traffic applications.</p>
<p>I recognize that SQLite might not always be the best choice for every project, and I’m open to hearing differing perspectives. If you believe a dedicated database like MySQL, PostgreSQL, or another RDBMS is the better route, I’d love to hear why.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Custom Caddy Docker image with Cloudflare DNS challenge support</title>
      <link>https://deuts.org/p/caddy-docker-cloudflare-dns-challenge/</link>
      <pubDate>Fri, 15 Nov 2024 08:11:44 +0800</pubDate>
      <guid>https://deuts.org/p/caddy-docker-cloudflare-dns-challenge/</guid>
      <description>Configure a custom Caddy Docker image to use Cloudflare’s DNS challenge, securing HTTPS without exposing ports 80/443, ideal for firewall, CGNAT, and load-balancer setups.</description>
      <content:encoded><![CDATA[<p>Securing your web services with SSL/TLS certificates is crucial, especially when dealing with public servers. Using Caddy’s built-in HTTPS functionality is easy, but situations involving firewalls, CGNAT, or a lack of access to port 80/443 benefit from Cloudflare&rsquo;s DNS challenge for seamless certificate automation. This tutorial outlines how to build a custom Caddy Docker image that integrates Cloudflare’s DNS module using <code>xcaddy</code> to streamline this process.</p>
<h3 id="why-opt-for-cloudflare-dns-challenge">Why Opt for Cloudflare DNS Challenge?</h3>
<p>Caddy&rsquo;s HTTP and TLS challenges work well for most, but the DNS challenge shines when:</p>
<ul>
<li>Your server is behind a firewall or CGNAT.</li>
<li>Your service is behind Cloudflare access policy</li>
<li>You want to avoid exposing ports 80 and 443 to the public.</li>
<li>Your setup includes a load balancer or other restrictive networking configurations.</li>
</ul>
<p>This method authenticates your domain ownership via the Cloudflare DNS API, allowing Caddy to fetch certificates without the need for open HTTP/HTTPS ports. See <a href="#how-the-dns-challenge-works">How the DNS Challenge Works</a> for more info.</p>
<h3 id="building-a-custom-caddy-image">Building a Custom Caddy Image</h3>
<p>The Dockerfile follows a multi-stage build:</p>
<ol>
<li><strong>Builder Stage</strong>: We use <code>xcaddy</code> to compile Caddy with the Cloudflare DNS provider plugin.</li>
<li><strong>Final Stage</strong>: The resulting binary is copied to a fresh Caddy image, creating a production-ready and lean container.</li>
</ol>
<h3 id="how-to-set-up-and-run">How to Set Up and Run</h3>
<h4 id="step-1-create-a-custom-docker-network-optional">Step 1: Create a Custom Docker Network (Optional)</h4>
<p>Creating a custom Docker network keeps services isolated and minimizes the need to expose ports on your VPS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker network create caddynetwork
</span></span></code></pre></div><p>If you choose a different network name, ensure the <code>compose.yml</code> file reflects it.</p>
<h4 id="step-2-create-your-composeyml-file">Step 2: Create your <code>compose.yml</code> file</h4>
<p>Below is the <code>compose.yml</code> configuration, which builds a custom Caddy Docker image and sets up networking for enhanced security:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">caddy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">caddy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">CLOUDFLARE_API_TOKEN=&lt;ENTER YOUR TOKEN HERE&gt;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">CADDY_ACME_EMAIL=&lt;ENTER YOUR EMAIL HERE&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;80:80&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;443:443&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./Caddyfile:/etc/caddy/Caddyfile</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./data:/data</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./config:/config</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">caddynetwork</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">caddynetwork</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><h4 id="step-3-configure-composeyml">Step 3: Configure <code>compose.yml</code></h4>
<p>Rename <code>_compose.yml</code> to <code>compose.yml</code> and set your environment variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">CLOUDFLARE_API_TOKEN=&lt;YOUR_TOKEN&gt;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">CADDY_ACME_EMAIL=&lt;YOUR_EMAIL&gt;</span>
</span></span></code></pre></div><ul>
<li><strong>CLOUDFLARE_API_TOKEN</strong>: Ensure this token has permissions for DNS zone edits on Cloudflare.</li>
<li><strong>CADDY_ACME_EMAIL</strong>: This email will be used by ACME for certificate registration.</li>
</ul>
<h4 id="step-4-build-and-run">Step 4: Build and Run</h4>
<p>Use Docker Compose to build and start the container in detached mode:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose up -d --build
</span></span></code></pre></div><h4 id="step-5-edit-your-caddyfile">Step 5: Edit Your Caddyfile</h4>
<p>Adjust your <code>Caddyfile</code> with the necessary domain and service details. Here’s a sample:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-caddy" data-lang="caddy"><span style="display:flex;"><span>example.com {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">reverse_proxy</span> localhost:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">tls</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">dns</span> <span style="color:#e6db74">cloudflare</span> <span style="color:#ae81ff">{env.CLOUDFLARE_API_TOKEN}</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Replace <code>example.com</code> with your actual domain.</li>
<li>Set <code>localhost</code> to the name or IP of your backend service.</li>
<li>Adjust <code>8080</code> to the port where your application runs.</li>
</ul>
<p>With this setup, Caddy will use Cloudflare’s DNS challenge to obtain certificates, keeping your services secure without exposing common HTTP/HTTPS ports.</p>
<hr>
<h3 id="how-the-dns-challenge-works">How the DNS Challenge Works</h3>
<p>Typically, to issue an SSL/TLS certificate, Caddy (or any Certificate Authority, CA) needs to verify that you actually own the domain in question. Normally, this is done by:</p>
<ol>
<li><strong>HTTP Challenge</strong>: Verifying domain ownership by placing a file on an accessible web server running on port 80.</li>
<li><strong>TLS-ALPN Challenge</strong>: Verifying via a specific response from a server running on port 443.</li>
</ol>
<p>However, both these methods require public access to specific ports on the server (80 or 443), which may not be feasible if:</p>
<ul>
<li><strong>Your server is behind a firewall</strong> or behind Carrier-Grade NAT (CGNAT) on a network that doesn’t expose external ports.</li>
<li><strong>You don’t want to expose ports 80 and 443 publicly</strong> for security or regulatory reasons.</li>
<li><strong>You’re using a load balancer</strong> or reverse proxy setup where ports may not map directly to a specific server.</li>
</ul>
<h3 id="why-the-cloudflare-dns-challenge-solves-this">Why the Cloudflare DNS Challenge Solves This</h3>
<p>The <strong>DNS challenge</strong> verifies domain ownership by checking for specific DNS records instead of requiring public access to your server. Here’s how it works:</p>
<ol>
<li><strong>Caddy uses Cloudflare’s API to add a special TXT record to your domain’s DNS settings</strong> (hosted on Cloudflare).</li>
<li><strong>The CA (e.g., Let’s Encrypt) queries Cloudflare’s DNS servers</strong> for the TXT record to verify domain ownership.</li>
<li>Once verified, the CA issues a certificate to Caddy for your domain, which it saves and manages.</li>
</ol>
<p>Because the DNS challenge doesn’t involve your server’s IP address or port accessibility, it allows Caddy to obtain certificates even when direct access to your server is restricted.</p>
<h3 id="why-you-need-cloudflare-api-permissions">Why You Need Cloudflare API Permissions</h3>
<p>The DNS challenge requires dynamically creating and removing DNS records on your domain during each certificate renewal. By providing Caddy with Cloudflare’s API token, you enable it to manage the necessary DNS records for verification, fully automating the certificate issuance and renewal process without exposing any ports.</p>
<p>In summary, <strong>the Cloudflare DNS challenge is essential</strong> when public port access is unavailable or undesirable. It’s a robust way to automate certificate management, especially in complex network environments, by verifying domain ownership through DNS rather than HTTP or TLS ports.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Securing Your Docker-Hosted Service with HTTP Basic Authentication in Caddy</title>
      <link>https://deuts.org/p/docker-caddy-basic-auth/</link>
      <pubDate>Thu, 14 Nov 2024 21:46:40 +0800</pubDate>
      <guid>https://deuts.org/p/docker-caddy-basic-auth/</guid>
      <description>Learn to secure Docker services with Caddy’s Basic Authentication by setting up a reverse proxy to protect internal or staging containers and restrict access to specific paths.</description>
      <content:encoded><![CDATA[<p>HTTP Basic Authentication offers a quick way to secure access to internal or staging services in a Docker environment, especially for controlled scenarios where high security isn’t critical. Although credentials sent via Basic Authentication can be decoded if intercepted, combining it with HTTPS ensures encryption, making it suitable for simple use cases. Here, we’ll set up Caddy as a reverse proxy with Basic Authentication to limit access to a service running in another container.</p>
<h3 id="scenario-overview">Scenario Overview</h3>
<p>In this example, we have:</p>
<ul>
<li>A <strong>Caddy container</strong> named <code>caddy</code></li>
<li>A <strong>service container</strong> named <code>sampledockercontainer</code>, which is the service we’re protecting, running on port <code>8080</code></li>
<li>Both containers are on the same <strong>Docker network</strong></li>
<li>The goal is to limit access to the <code>sampledockercontainer</code> service with Basic Authentication</li>
</ul>
<h3 id="setting-up-the-caddyfile">Setting Up the Caddyfile</h3>
<p>Start with a simple Caddyfile that proxies traffic to the <code>sampledockercontainer</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Caddyfile" data-lang="Caddyfile"><span style="display:flex;"><span>example.com {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">reverse_proxy</span> sampledockercontainer:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This configuration forwards all requests for <code>example.com</code> to the <code>sampledockercontainer</code> service within the Docker network.</p>
<h3 id="generating-a-hashed-password-for-authentication">Generating a Hashed Password for Authentication</h3>
<p>Since Caddy is running as a Docker container, use the following <code>docker exec</code> command to generate a hashed password for authentication:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker exec -it caddy caddy hash-password --plaintext <span style="color:#e6db74">&#39;yoursupersecretpassword&#39;</span>
</span></span></code></pre></div><p>Assuming your username is <code>user</code>, the command returns a hashed password like:</p>
<pre tabindex="0"><code>$2a$14$UnmpufOS3hIBsW5Jn.lbpe0qtoa5kCKYfJNPGsgnOr2D6mPma8aPm
</code></pre><h3 id="adding-basic-authentication-to-the-caddyfile">Adding Basic Authentication to the Caddyfile</h3>
<p>Update the Caddyfile to include Basic Authentication, securing access to <code>example.com</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Caddyfile" data-lang="Caddyfile"><span style="display:flex;"><span>example.com {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">basicauth</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">user</span> <span style="color:#e6db74">$2a$14$UnmpufOS3hIBsW5Jn.lbpe0qtoa5kCKYfJNPGsgnOr2D6mPma8aPm</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">reverse_proxy</span> sampledockercontainer:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now, visitors will be prompted for a username and password before gaining access.</p>
<h3 id="restricting-authentication-to-specific-paths">Restricting Authentication to Specific Paths</h3>
<p>You may want only certain paths to require authentication, allowing general access to others. For example, you can limit Basic Authentication to the <code>/admin</code> path while keeping the root URL publicly accessible:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Caddyfile" data-lang="Caddyfile"><span style="display:flex;"><span>example.com {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">basicauth</span> <span style="color:#a6e22e">/admin/*</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">user</span> <span style="color:#e6db74">$2a$14$UnmpufOS3hIBsW5Jn.lbpe0qtoa5kCKYfJNPGsgnOr2D6mPma8aPm</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">reverse_proxy</span> <span style="color:#a6e22e">/admin/*</span> sampledockercontainer:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">reverse_proxy</span> <span style="color:#a6e22e">/*</span> sampledockercontainer:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With this setup:</p>
<ul>
<li>Requests to <code>example.com</code> are open to all users.</li>
<li>Requests to <code>example.com/admin/</code> require a valid username and password.</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>This Caddyfile setup demonstrates a simple, effective way to protect containerized services with Basic Authentication. For Dockerized applications, Caddy makes it easy to limit access to sensitive areas, securing your internal or staging environments with minimal configuration.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Samba Docker or Native</title>
      <link>https://deuts.org/p/samba-on-docker/</link>
      <pubDate>Sat, 16 Mar 2024 17:41:18 +0800</pubDate>
      <guid>https://deuts.org/p/samba-on-docker/</guid>
      <description>This post discusses the advantages of using Docker for Samba over native implementation, highlighting the convenience of portability and easier reinstallation with Docker Compose files. The author reflects on their past experience with native Samba setups and shares resources for a Docker-based Samba implementation.</description>
      <content:encoded><![CDATA[<p>There is a 2-year old <a href="https://www.reddit.com/r/selfhosted/comments/t2x1fy/samba_server_docker_or_native/">thread</a> on Reddit. Many in the comments say it doesn&rsquo;t make sense.</p>
<p>I&rsquo;ve successfully implemented Samba natively in the past. The problem with native implementation is that you can take note of the procedures you&rsquo;ve made to make it running, but when you need to reinstall your Linux OS or install in another box, you have to go through all <a href="https://ubuntu.com/tutorials/install-and-configure-samba">those procedures again</a>. With Docker, especially if you already have a working docker compose file, you just need to back up and/or carry over that yml file to the new box.</p>
<p>So here are the resources I will need to revisit in the future for a Docker implementation of Samba:</p>
<ul>
<li><a href="https://github.com/crazy-max/docker-samba">Crazy Max</a> - <a href="https://github.com/crazy-max/docker-samba/blob/master/examples/compose/compose.yml">docker compose file</a></li>
<li><a href="https://github.com/ServerContainers/samba">ServerContainers Samba</a> - sample <a href="https://github.com/ServerContainers/samba/blob/master/docker-compose.yml">docker compose file</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Docker Apps to Install</title>
      <link>https://deuts.org/p/my-docker-apps-to-install-in-2024/</link>
      <pubDate>Sun, 25 Feb 2024 22:41:59 +0800</pubDate>
      <guid>https://deuts.org/p/my-docker-apps-to-install-in-2024/</guid>
      <description>This post shares the author&amp;#39;s inspiration from Jim’s Garage on YouTube and his GitHub repository to try out several Docker applications: Immich, Paperless-ngx, Vikunja, rClone, and Restic.</description>
      <content:encoded><![CDATA[<p>Browsing through <a href="https://www.youtube.com/@Jims-Garage">Jim&rsquo;s Garage</a> on Youtube, and his <a href="https://github.com/JamesTurland/JimsGarage">Github repository</a>, I was inspired to finally give these Docker apps a try:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://github.com/JamesTurland/JimsGarage/tree/main/Immich">Immich</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/JamesTurland/JimsGarage/tree/main/Paperless-ngx">Paperless-ngx</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/JamesTurland/JimsGarage/tree/main/Vikunja">Vikunja</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/JamesTurland/JimsGarage/tree/main/rClone">rClone</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/JamesTurland/JimsGarage/tree/main/restic">Restic</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Update on Vikunja</title>
      <link>https://deuts.org/p/vikunja-update-2024/</link>
      <pubDate>Sun, 25 Feb 2024 22:19:57 +0800</pubDate>
      <guid>https://deuts.org/p/vikunja-update-2024/</guid>
      <description>This post discusses a recent change in the Docker installation of Vikunja, where a separate API container is no longer required. The author is considering starting to use Vikunja and plans to adapt the provided Docker Compose file (originally using Traefik) to their own setup with NPM as the reverse proxy.</description>
      <content:encoded><![CDATA[<p>In August, I <a href="https://deuts.org/vikunja-internal-server-error/">posted</a> about my problems running Vikunja via Docker.</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/bq5ape59wpQ?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>
    <div class="yt-separator">&nbsp;</div>

<p>Based on the above video, however, there seems to be no more requirement in a Docker install of Vikunja for a separate API container?</p>
<p>Is this a sign I should start using Vikunja now? Let&rsquo;s see. As soon as I get the time.</p>
<h3 id="the-docker-compose-file">The Docker Compose File</h3>
<p>The docker-compose file below (grabbed from <a href="https://github.com/JamesTurland/JimsGarage/blob/main/Vikunja/docker-compose.yaml">here</a>) involves using Traefik as the reverse proxy, but I should be able to customize for my use case, as I&rsquo;m using <a href="https://github.com/NginxProxyManager/nginx-proxy-manager">NPM</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">vikunja</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">vikunja/vikunja</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">VIKUNJA_SERVICE_PUBLICURL</span>: <span style="color:#ae81ff">https://vikunja.jimsgarage.co.uk</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">VIKUNJA_DATABASE_HOST</span>: <span style="color:#ae81ff">db:3306</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">VIKUNJA_DATABASE_PASSWORD</span>: <span style="color:#ae81ff">changeme</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">VIKUNJA_DATABASE_TYPE</span>: <span style="color:#ae81ff">mysql</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">VIKUNJA_DATABASE_USER</span>: <span style="color:#ae81ff">vikunja</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">VIKUNJA_DATABASE_DATABASE</span>: <span style="color:#ae81ff">vikunja</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">VIKUNJA_SERVICE_JWTSECRET</span>: <span style="color:#ae81ff">dskfj23kkjsdkjsdfjkl3sdfgfsdfhsdfkh3ozxpqzx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>: 
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./files:/app/vikunja/files</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">proxy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">service_healthy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.enable=true&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.http.routers.vikunja.entrypoints=http&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.http.routers.vikunja.rule=Host(`vikunja.jimsgarage.co.uk`)&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.http.middlewares.vikunja-https-redirect.redirectscheme.scheme=https&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.http.routers.vikunja.middlewares=vikunja-https-redirect&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.http.routers.vikunja-secure.entrypoints=https&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.http.routers.vikunja-secure.rule=Host(`vikunja.jimsgarage.co.uk`)&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.http.routers.vikunja-secure.tls=true&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.http.routers.vikunja-secure.service=vikunja&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.http.routers.vikunja.tls.certResolver=cloudflare&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.http.services.vikunja.loadbalancer.server.port=3456&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;traefik.docker.network=proxy&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">mariadb:10</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">command</span>: --<span style="color:#ae81ff">character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">MYSQL_ROOT_PASSWORD</span>: <span style="color:#ae81ff">supersupersecret </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">MYSQL_USER</span>: <span style="color:#ae81ff">vikunja</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">MYSQL_PASSWORD</span>: <span style="color:#ae81ff">changeme</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">MYSQL_DATABASE</span>: <span style="color:#ae81ff">vikunja</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">proxy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./db:/var/lib/mysql</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">healthcheck</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">test</span>: [<span style="color:#e6db74">&#34;CMD-SHELL&#34;</span>, <span style="color:#e6db74">&#34;mysqladmin ping -h localhost -u vikunja --password=changeme&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">interval</span>: <span style="color:#ae81ff">2s</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">start_period</span>: <span style="color:#ae81ff">30s</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">proxy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>I can&#39;t make Vikunja work on my set up</title>
      <link>https://deuts.org/p/vikunja-internal-server-error/</link>
      <pubDate>Fri, 25 Aug 2023 19:04:11 +0800</pubDate>
      <guid>https://deuts.org/p/vikunja-internal-server-error/</guid>
      <description>Vikunja is a feature-rich open-source todo app, but installing it via Docker requires multiple containers. The author faced frequent Internal Server Errors and API issues when using docker-compose, even after adding Redis. Frustrated by the ongoing errors, the author ultimately removed the setup entirely.</description>
      <content:encoded><![CDATA[<p>Vikunja is a powerful open-source todo app that provides users with a range of features designed to enhance productivity. It offers task tracking, due date management, collaboration tools, and more, all within an intuitive interface.</p>
<p>Installing via Vikunja via Docker, though, requires quite a number of containers running. The normal install alone needs a minimum 4 containers:</p>
<ul>
<li>database</li>
<li>api</li>
<li>frontend</li>
<li>nginx</li>
</ul>
<p>When I tried running them via <code>docker-compose</code>, I encountered a lot of this kind of Internal Server Error:</p>
<p><img alt="vikunja-error" loading="lazy" src="/p/vikunja-internal-server-error/vikunja-error.png"></p>
<p>And sometimes logging in returned repetitive API errors.</p>
<p>I read somewhere that installing Redis along within the same docker-compose file helps. So I did.</p>
<p>But I still encountered several Internal Server Errors, albeit on rarer occasions this time.</p>
<p>5 Docker Containers, and still errors. Vikunja left me no choice but to run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker-compose down
</span></span><span style="display:flex;"><span>docker image prune -a
</span></span><span style="display:flex;"><span>cd ..
</span></span><span style="display:flex;"><span>rm -R vikunja
</span></span></code></pre></div>]]></content:encoded>
    </item>
  </channel>
</rss>
