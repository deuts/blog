<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Github on Deuts Log</title>
    <link>https://deuts.org/t/github/</link>
    <description>Recent content in Github on Deuts Log</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <copyright>2024 Deuts Log</copyright>
    <lastBuildDate>Fri, 22 Nov 2024 14:09:57 +0800</lastBuildDate>
    <atom:link href="https://deuts.org/t/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo vs. Jekyll: Which One Should You Choose?</title>
      <link>https://deuts.org/p/hugo-vs-jekyll/</link>
      <pubDate>Fri, 22 Nov 2024 14:09:57 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-vs-jekyll/</guid>
      <description>Wondering whether to choose Hugo or Jekyll for your static site? Read on as we compare their strengths, weaknesses, and hosting options, helping you make an informed decision based on your preferences and project requirements.</description>
      <content:encoded><![CDATA[<p>If you&rsquo;re deciding between <a class="applink" href="https://deuts.org/a/hugo" target="_blank">Hugo</a> and <a class="applink" href="https://deuts.org/a/jekyll" target="_blank">Jekyll</a> for your static site generator, here&rsquo;s a clear comparison to help you choose the right tool for your needs.</p>
<table>
  <thead>
      <tr>
          <th><strong>Criteria</strong></th>
          <th><strong>Hugo</strong></th>
          <th><strong>Jekyll</strong></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Performance</strong></td>
          <td>Extremely fast; can rebuild thousands of pages in seconds. Great for large or frequently updated sites.</td>
          <td>Slower compared to Hugo, especially with large sites. Suitable for smaller, less frequently updated sites.</td>
      </tr>
      <tr>
          <td><strong>Installation</strong></td>
          <td>Simple: a single binary with no dependencies.</td>
          <td>Requires Ruby and Gems, which can be complex for non-Ruby users.</td>
      </tr>
      <tr>
          <td><strong>Themes</strong></td>
          <td>Flexible with advanced customization options and shortcodes. Templates use Go’s templating engine.</td>
          <td>Large library of pre-built themes. Uses Liquid templates, which are simpler but less powerful for advanced users.</td>
      </tr>
      <tr>
          <td><strong>Markdown Support</strong></td>
          <td>Native support with configurable front matter (TOML, YAML, JSON). Excellent for multilingual sites.</td>
          <td>Markdown support via plugins like kramdown. Front matter is YAML-only. Limited multilingual capabilities.</td>
      </tr>
      <tr>
          <td><strong>Ecosystem</strong></td>
          <td>Rapidly growing community with a smaller but expanding theme library. Hugo also has more GitHub stars, reflecting its developer appeal.</td>
          <td>Established ecosystem with a mature community and wide adoption. Native integration with GitHub Pages.</td>
      </tr>
      <tr>
          <td><strong>Plugins</strong></td>
          <td>No plugins; functionality is built-in or handled externally. Faster and more secure as a result.</td>
          <td>Extensive plugin ecosystem for advanced features. Can slow down build times and add complexity.</td>
      </tr>
      <tr>
          <td><strong>Use Case</strong></td>
          <td>Best for performance-focused, large, multilingual, or highly customized sites.</td>
          <td>Great for smaller sites, blogs, or projects requiring GitHub Pages integration or extensive plugins.</td>
      </tr>
  </tbody>
</table>
<div class="callout info">
  <div class="callout-content">
    <strong>On Github Pages Hosting</strong>
    <p>
Jekyll has native support on GitHub Pages, allowing you to upload Markdown files directly to your repository and have the site built automatically on GitHub’s servers. In contrast, Hugo requires you to build the site yourself (using the hugo command) before deploying the generated static files to GitHub Pages.
</p>
  </div>
</div>
<hr>
<h3 id="recommendations">Recommendations</h3>
<ul>
<li>
<p><strong>Choose Hugo</strong> if you:</p>
<ul>
<li>Need blazing-fast performance.</li>
<li>Prefer a simpler installation process.</li>
<li>Work on multilingual or large sites.</li>
<li>Want flexibility and control over site structure and layout.</li>
</ul>
</li>
<li>
<p><strong>Choose Jekyll</strong> if you:</p>
<ul>
<li>Need an extensive plugin ecosystem.</li>
<li>Want simplicity with pre-built themes.</li>
<li>Rely heavily on GitHub Pages for hosting.</li>
</ul>
</li>
</ul>
<hr>
<h3 id="conclusion">Conclusion</h3>
<p>Hugo and Jekyll are both excellent tools, but your choice will depend on your specific needs. While Hugo&rsquo;s rising GitHub star count highlights its developer-first focus and popularity among performance-conscious users, Jekyll shines with its ease of use and extensive theme community.</p>
<p>At the end of the day, Hugo and Jekyll are like coffee and tea—both get the job done, but one’s probably better suited to your taste. So, pick your brew, and let the static site-building begin!</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to Use an SSH Key for a Specific GitHub Repository</title>
      <link>https://deuts.org/p/ssh-key-github-repo/</link>
      <pubDate>Fri, 22 Nov 2024 11:01:31 +0800</pubDate>
      <guid>https://deuts.org/p/ssh-key-github-repo/</guid>
      <description>A walkthrough process of configuring SSH keys to connect to a specific GitHub repository. This setup enhances security by limiting access to just one repository, making it safer, especially when storing private keys on remote servers or VPS.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>When working with GitHub repositories, it&rsquo;s common to use SSH keys to authenticate instead of passwords. However, if you&rsquo;re managing multiple repositories or working on a single repository with specific security needs, you might want to configure SSH keys for just one repository. In this guide, we’ll walk you through setting up a dedicated SSH key to securely sync with a single GitHub repository, improving security, especially when storing private keys on remote servers or VPS.</p>
<h2 id="why-use-ssh-keys-for-a-specific-repository">Why Use SSH Keys for a Specific Repository?</h2>
<p>Using a single SSH key for a repository restricts access to only that repository. This isolation is useful in several scenarios:</p>
<ul>
<li><strong>Improved security</strong>: If your private key is compromised, access is limited to just the target repository.</li>
<li><strong>Granular control</strong>: You can control which key has access to which repository, making it easier to manage multiple keys for different tasks.</li>
<li><strong>Simplified automation</strong>: When using deploy keys or automation scripts, this approach can be used to grant access to only one repository at a time.</li>
</ul>
<h2 id="step-1-generate-a-new-ssh-key">Step 1: Generate a New SSH Key</h2>
<p>If you don’t already have a specific SSH key for your GitHub repository, start by generating one. You can use <code>ssh-keygen</code> to create a new key pair.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ssh-keygen -t ed25519 -C <span style="color:#e6db74">&#34;your_email@example.com&#34;</span> -f ~/.ssh/github_repo_id_ed25519
</span></span></code></pre></div><p>This will create two files:</p>
<ul>
<li><code>~/.ssh/github_repo_id_ed25519</code> (your private key)</li>
<li><code>~/.ssh/github_repo_id_ed25519.pub</code> (your public key)</li>
</ul>
<p>The private key should <strong>never</strong> be shared or exposed, while the public key will be added to your GitHub repository.</p>
<h2 id="step-2-add-the-public-key-to-your-github-repository">Step 2: Add the Public Key to Your GitHub Repository</h2>
<p>Go to your GitHub repository, and in the <strong>Settings</strong> section, add the <strong>public key</strong> as a <strong>deploy key</strong>:</p>
<ol>
<li>Navigate to <strong>Settings</strong> → <strong>Deploy Keys</strong>.</li>
<li>Click <strong>Add deploy key</strong>.</li>
<li>Give it a name (e.g., &ldquo;GitHub SSH Key&rdquo;).</li>
<li>Paste the contents of your <code>github_repo_id_ed25519.pub</code> file into the key field.</li>
<li>Select either <strong>read-only</strong> or <strong>read-write</strong> access depending on the level of access you want.</li>
</ol>
<p>Click <strong>Add key</strong> to save.</p>
<h2 id="step-3-configure-ssh-for-the-repository">Step 3: Configure SSH for the Repository</h2>
<p>Now, configure SSH to use the specific key for accessing the repository. You can do this by adding an entry to your <code>~/.ssh/config</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nano ~/.ssh/config
</span></span></code></pre></div><p>Add the following configuration, replacing <code>github-repo</code> with your preferred alias and ensuring the path to your private key is correct:</p>
<pre tabindex="0"><code class="language-ssh" data-lang="ssh">Host github-repo
    HostName github.com
    User git
    IdentityFile ~/.ssh/github_repo_id_ed25519
    IdentitiesOnly yes
</code></pre><p>This configuration tells SSH to use the specific key <code>github_repo_id_ed25519</code> when connecting to GitHub.</p>
<h2 id="step-4-update-or-add-the-remote-url-in-your-local-repository">Step 4: Update or Add the Remote URL in Your Local Repository</h2>
<h3 id="sync-a-local-repository">Sync a local repository</h3>
<p>To sync your local repository with the GitHub repository, change the remote URL to use the SSH alias you’ve configured in <code>~/.ssh/config</code>. Navigate to your local Git repository and run the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd /path/to/your/repository
</span></span><span style="display:flex;"><span>git remote set-url origin git@github-repo:username/repository.git
</span></span></code></pre></div><p>Make sure to replace <code>username/repository.git</code> with the actual repository path.</p>
<h3 id="add-remote-repository-to-local">Add remote repository to local</h3>
<p>To add a remote repository:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd /path/to/your/repository
</span></span><span style="display:flex;"><span>git init
</span></span><span style="display:flex;"><span>git remote add origin git@github-repo:username/repository.git
</span></span></code></pre></div><h2 id="step-5-test-the-ssh-connection">Step 5: Test the SSH Connection</h2>
<p>Now that everything is set up, verify that your SSH connection works properly by running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ssh -T github-repo
</span></span></code></pre></div><p>You should see a message like:</p>
<pre tabindex="0"><code>Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre><p>This confirms that the SSH key is correctly configured and is being used to authenticate with GitHub.</p>
<h2 id="step-6-push-changes-to-github">Step 6: Push Changes to GitHub</h2>
<p>Once the remote URL is updated, you can start syncing your local repository with GitHub. To push changes to your GitHub repository, simply run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git push origin main  <span style="color:#75715e"># Or the relevant branch name</span>
</span></span></code></pre></div><p>Git will use the SSH key associated with the <code>github-repo</code> alias to authenticate and push your changes.</p>
<h2 id="conclusion">Conclusion</h2>
<p>By following these steps, you’ve securely configured SSH to access a specific GitHub repository. This approach not only enhances security by limiting access but also provides better management of your SSH keys, especially when dealing with multiple repositories or automating workflows.</p>
<p>With this setup, you can now safely push, pull, and manage your GitHub repository without the risk of exposing your other repositories or credentials.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Building an Efficient Blogging Workflow with Hugo, Obsidian, and GitHub Pages</title>
      <link>https://deuts.org/p/build-hugo-obsidian-github-pages-workflow/</link>
      <pubDate>Wed, 13 Nov 2024 23:44:23 +0800</pubDate>
      <guid>https://deuts.org/p/build-hugo-obsidian-github-pages-workflow/</guid>
      <description>Exploring Hugo, Obsidian and Github Pages as a flexible and efficient blogging setup, focusing on low dependency and high control, with a look at potential WordPress migration challenges.</description>
      <content:encoded><![CDATA[<p>Recent controversies surrounding Matt Mullenweg and WP Engine have led me to rethink my blogging platform. While WordPress has long been a popular CMS, I’m increasingly drawn to the simplicity and control of static site generators like Hugo.</p>
<h3 id="why-consider-hugo-over-wordpress">Why Consider Hugo Over WordPress?</h3>
<p>Hugo’s performance and security benefits are difficult to ignore:</p>
<ul>
<li><strong>Performance</strong>: Hugo serves static HTML files without any backend load, delivering high-speed access.</li>
<li><strong>Security</strong>: Without a database or PHP reliance, Hugo sites inherently avoid many vulnerabilities that affect WordPress.</li>
<li><strong>Customization</strong>: Total control over templates and layouts eliminates the plugin bloat that can slow down WordPress.</li>
<li><strong>Version Control</strong>: Working with Git keeps my changes organized and easy to revert if needed.</li>
<li><strong>Low Maintenance</strong>: No frequent updates or patches—Hugo just works as-is, saving time on upkeep.</li>
</ul>
<p>Despite these advantages, I hesitated because managing content directly in Hugo, especially from the terminal, felt clunky compared to the WordPress dashboard. Using VS Code helped, but it was still missing that CMS simplicity.</p>
<h3 id="my-new-workflow-obsidian-and-hugo-with-minimal-dependencies">My New Workflow: Obsidian and Hugo with Minimal Dependencies</h3>
<p>I&rsquo;ve now found a balance that works without tying me to specific plugins that may become obsolete or unsupported. Here’s what my current workflow looks like:</p>
<ol>
<li>
<p><strong>Obsidian with Templater and Dataview Plugins</strong>:</p>
<ul>
<li>I use Obsidian for creating and editing posts, keeping my Hugo directory aligned with my Obsidian vault. With Templater, I can build posts from templates and generate shortcodes. The Dataview plugin helps me get an overview of post summaries without impacting the publishing process.</li>
<li>Notably, I’ve chosen <strong>not</strong> to use plugins like <a href="/hugo-and-obsidian-workflow/">Hugo Publish or Static Site MD Exporter</a>. Relying on such plugins could cause future complications if they’re discontinued, so I’ve kept my setup as independent as possible.</li>
</ul>
</li>
<li>
<p><strong>Building with Hugo</strong>:</p>
<ul>
<li>After editing posts, I use Hugo to generate HTML files, configured to output to a <code>docs</code> folder for simplicity.</li>
</ul>
</li>
<li>
<p><strong>Publishing to GitHub Pages</strong>:</p>
<ul>
<li>Pushing my Hugo directory, including the <code>docs</code> folder, to GitHub triggers publishing through GitHub Pages. This approach enables a completely self-managed site without relying on an external CMS.</li>
<li>If I don’t have Obsidian access, I can still edit content through GitHub’s web interface, pull the changes, run Hugo to build, and push the updated site back.</li>
</ul>
</li>
<li>
<p><strong>Direct Edit Links</strong>:</p>
<ul>
<li>For convenience, each site page includes a subtle edit button linking to the GitHub page source, making updates simple.</li>
</ul>
</li>
</ol>
<h3 id="considering-migration">Considering Migration</h3>
<p>While I’m currently set on Hugo for future posts, the complexity involved in migrating <a href="https://deuts.net/">my WordPress content</a> — nearly 900 posts and 2,500 comments — makes me pause. Migrating everything isn’t an easy task, so for now, I’m planning to blog on Hugo going forward while exploring efficient ways to gradually bring over my legacy content.</p>
<p>This workflow with Hugo, Obsidian and Github Pages has struck the right balance, letting me blog on my terms without depending on plugins or external services. Obsidian, Hugo, and GitHub all rely on Markdown, creating a seamless experience where these tools work in perfect harmony. For anyone seeking a lean, self-reliant approach to publishing, this setup might be the perfect fit.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Setting Up a Git Repository for Pushing to GitHub</title>
      <link>https://deuts.org/p/git-repository-to-github/</link>
      <pubDate>Wed, 13 Nov 2024 11:44:23 +0800</pubDate>
      <guid>https://deuts.org/p/git-repository-to-github/</guid>
      <description>Set up a Git repository with main as the initial branch, link it to GitHub with a custom remote (not origin), and authenticate using GitHub’s Personal Access Token (PAT). This guide covers staging, committing, and pushing files securely and efficiently, so you can use common Git commands without repeatedly specifying a remote.</description>
      <content:encoded><![CDATA[<p>When starting a new project, it&rsquo;s best practice to initialize the Git repository with <code>main</code> as the default branch (instead of the usual <code>master</code>). This post will walk you through how to set up your local repository, link it to a GitHub repository, and push your changes, including the setup for authentication using GitHub’s Personal Access Token (PAT).</p>
<h3 id="1-initialize-a-git-repository-with-main-as-the-default-branch">1. Initialize a Git Repository with <code>main</code> as the Default Branch</h3>
<p>Begin by navigating to the directory where your project is located. Run the following commands to initialize Git with the <code>main</code> branch directly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd /path/to/your/project
</span></span><span style="display:flex;"><span>git init --initial-branch<span style="color:#f92672">=</span>main
</span></span></code></pre></div><h3 id="2-stage-and-commit-your-files">2. Stage and Commit Your Files</h3>
<p>Next, add all files to the staging area and commit them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Initial commit&#34;</span>
</span></span></code></pre></div><h3 id="3-link-your-local-repository-to-github">3. Link Your Local Repository to GitHub</h3>
<p>Now, set up a connection to your GitHub repository. Instead of using the default <code>origin</code> label for the remote, you can specify a custom label like <code>github</code>, which will allow flexibility with multiple remotes if needed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git remote add github https://github.com/deuts/deuts.github.io.git
</span></span></code></pre></div><h3 id="4-push-to-github-without-using-origin">4. Push to GitHub without Using <code>origin</code></h3>
<p>For the first push, use the <code>-u</code> flag to set <code>github</code> as the default remote:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git pull github main --rebase
</span></span><span style="display:flex;"><span>git push -u github main
</span></span></code></pre></div><p>After this initial push, you can use <code>git push</code> and <code>git pull</code> directly without specifying the remote every time, as Git will use <code>github</code> by default for this branch.</p>
<h3 id="5-authentication-when-youll-need-your-email-and-personal-access-token-pat">5. Authentication: When You&rsquo;ll Need Your Email and Personal Access Token (PAT)</h3>
<p>When pushing to GitHub for the first time, Git will prompt you to set up authentication. Here’s what to expect:</p>
<ul>
<li>
<p><strong>Email</strong>: If this is the first time using Git on your machine, Git will ask you to set your email and name:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git config --global user.email <span style="color:#e6db74">&#34;you@example.com&#34;</span>
</span></span><span style="display:flex;"><span>git config --global user.name <span style="color:#e6db74">&#34;Your Name&#34;</span>
</span></span></code></pre></div><p>This is required for all commits, as GitHub associates your email with your GitHub account.</p>
</li>
<li>
<p><strong>Personal Access Token (PAT)</strong>: Instead of your GitHub password, Git now requires a PAT for authentication. When prompted to log in, enter your username and the PAT as the password.</p>
<p>To create a PAT:</p>
<ol>
<li>Go to <a href="https://github.com/settings/tokens">GitHub’s PAT settings</a>.</li>
<li>Generate a token with <code>repo</code> access.</li>
<li>Use this token in place of your password when Git requests authentication.</li>
</ol>
</li>
</ul>
<h3 id="common-commands-summary">Common Commands Summary</h3>
<ul>
<li><strong>Initialize a Git repository with <code>main</code></strong>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git init --initial-branch<span style="color:#f92672">=</span>main
</span></span></code></pre></div></li>
<li><strong>Add and commit changes</strong>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Commit message&#34;</span>
</span></span></code></pre></div></li>
<li><strong>Add a custom remote (<code>github</code>) and push</strong>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git remote add github https://github.com/deuts/deuts.github.io.git
</span></span><span style="display:flex;"><span>git push -u github main
</span></span></code></pre></div></li>
<li><strong>Push and pull with defaults</strong>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git push    <span style="color:#75715e"># no need for origin</span>
</span></span><span style="display:flex;"><span>git pull    <span style="color:#75715e"># no need for origin</span>
</span></span></code></pre></div></li>
</ul>
<p>With this setup, you&rsquo;ll be using the <code>main</code> branch, avoiding the default <code>origin</code> label, and ensuring secure access with GitHub’s Personal Access Token (PAT) system.</p>
<h3 id="watch-this-video-if-you-want-for-more-context">Watch this video if you want for more context</h3>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/-RZ03WHqkaY?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>
    <div class="yt-separator">&nbsp;</div>

]]></content:encoded>
    </item>
  </channel>
</rss>
