<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Deuts Log</title>
    <link>https://deuts.org/t/linux/</link>
    <description>Recent content in Linux on Deuts Log</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>en</language>
    <copyright>2024 Deuts Log</copyright>
    <lastBuildDate>Wed, 11 Dec 2024 13:02:41 +0800</lastBuildDate>
    <atom:link href="https://deuts.org/t/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tailscale Accept DNS Settings</title>
      <link>https://deuts.org/p/tailscale-accept-dns-settings/</link>
      <pubDate>Wed, 11 Dec 2024 13:02:41 +0800</pubDate>
      <guid>https://deuts.org/p/tailscale-accept-dns-settings/</guid>
      <description>Tailscale automatically manages DNS settings, but you may prefer to use local DNS servers. Find out how to disable Tailscale DNS on Linux and how the process differs on Windows.</description>
      <content:encoded><![CDATA[<p>When you install Tailscale on a Linux server and run the <code>sudo tailscale up</code> command, it automatically enables DNS management with the setting <code>--accept-dns=true</code>. This forces Tailscale to handle DNS resolution, which may not always be what you want.</p>
<p>By default, when you enable <strong>MagicDNS</strong> in the Tailscale admin panel, it overwrites your <code>/etc/resolv.conf</code> file with its DNS server <code>100.100.100.100</code>. If you add a custom nameserver and enable <strong>Override local DNS</strong>, Tailscale will apply that DNS server across all devices in your Tailnet. This is useful if you’re using services like Pi-Hole or NextDNS.</p>
<p>But what if you want to disable Tailscale DNS on certain devices and revert to local DNS settings?</p>
<h2 id="disabling-tailscale-dns-on-linux">Disabling Tailscale DNS on Linux</h2>
<p>To disable Tailscale&rsquo;s DNS management on Linux, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo tailscale set --accept-dns<span style="color:#f92672">=</span>false
</span></span></code></pre></div><p>This command will revert your <code>/etc/resolv.conf</code> to the DNS values it had before Tailscale was installed, like <code>1.1.1.1</code> or <code>8.8.8.8</code>. Your Linux server will no longer be affected by Tailscale&rsquo;s DNS settings, which is useful if you prefer to manage DNS locally, particularly on a VPS where misconfigurations, either in the DNS settings or the ACL, can be problematic.</p>
<h2 id="tailscale-dns-on-windows">Tailscale DNS on Windows</h2>
<p>On Windows, this process is easier, as there&rsquo;s a simple checkbox to disable Tailscale DNS in the system tray preferences. This GUI option offers a more straightforward way to adjust DNS settings without needing terminal commands.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Tailscale’s DNS management is convenient, but sometimes you may need to regain control over DNS settings. Disabling Tailscale DNS on Linux is a quick way to ensure your server uses local DNS settings, keeping your configuration simple and reliable.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Hugo and Obsidian workflow</title>
      <link>https://deuts.org/p/hugo-and-obsidian-workflow/</link>
      <pubDate>Tue, 12 Nov 2024 21:44:50 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-and-obsidian-workflow/</guid>
      <description>Highlights of issues with Obsidian plugins like Hugo Publish and Static Site MD Exporter when used in a Hugo blogging workflow.</description>
      <content:encoded><![CDATA[<p>When combining Obsidian with Hugo for a streamlined blogging workflow, several plugins claim to offer an easy publishing process, but some fall short due to misalignment with Hugo’s expectations. In this post, I’ll highlight some common issues with the plugins I’ve encountered.</p>
<h2 id="the-problem-with-available-obsidian-plugins">The Problem with Available Obsidian Plugins</h2>
<h3 id="hugo-publishhttpsgithubcomkirito41ddobsidian-hugo-publish"><a href="https://github.com/kirito41dd/obsidian-hugo-publish">Hugo Publish</a></h3>
<p>One plugin that attempts to bridge the gap between Obsidian and Hugo is <strong>Hugo Publish</strong>. This plugin lets you assign tags to notes, which it then processes into Markdown files that can be used with Hugo. However, there&rsquo;s a significant flaw: if you assign a <code>blog</code> tag to your notes for processing, the plugin carries this tag over to the output <code>.md</code> files. This means that every post, when built with Hugo, will include the <code>blog</code> tag, which is not only redundant but goes against the purpose of using tags as categories or topics.</p>
<p>The problem here is that <strong>Hugo Publish</strong> does not account for the need to handle tags dynamically for each post. In Hugo, tags are often used for grouping and categorization, and repeating the same tag across all posts diminishes their value.</p>
<h3 id="static-site-md-exporterhttpsgithubcomyy4382obsidian-static-site-export"><a href="https://github.com/yy4382/obsidian-static-site-export">Static Site MD Exporter</a></h3>
<p>Another plugin, <strong>Static Site MD Exporter</strong>, offers a different approach by publishing the processed <code>.md</code> files directly to GitHub. From there, you can use <code>git pull</code> to bring them into your Hugo project and build the site.</p>
<p>This plugin offers a useful feature: by adding <code>published: true</code> in the frontmatter of a note, it marks the note for processing and publishing. However, this is where things start to break down when using Hugo. The <code>published</code> property is actually an alias for <code>publishDate</code> in Hugo, which expects a date value, not a boolean. As a result, when you run the <code>hugo</code> build command, Hugo throws an error because it cannot interpret <code>published: true</code> correctly.</p>
<hr>
<h2 id="summary">Summary</h2>
<p>Both the <strong>Hugo Publish</strong> and <strong>Static Site MD Exporter</strong> plugins offer valuable functionality, but they fall short in handling tags and frontmatter properties according to Hugo’s conventions. The inability of these plugins to properly manage <code>publishDate</code> and <code>tags</code> leads to errors when building the Hugo site and creates unnecessary redundancy in post tags. These are important issues that need to be addressed in order for the workflow to function smoothly with Hugo.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Checklist of things to do on a new VPS server</title>
      <link>https://deuts.org/p/new-vps-checklist/</link>
      <pubDate>Sun, 13 Aug 2023 16:40:41 +0800</pubDate>
      <guid>https://deuts.org/p/new-vps-checklist/</guid>
      <description>This guide walks through the process of setting up a fresh Linux system and installing essential tools, Docker, Docker Compose, Cloudflare Tunnel, Portainer, and Duplicati. It includes instructions for updating the system, changing the root password, adding a non-root user, setting the timezone, and installing Docker. Additionally, it provides detailed steps for configuring Docker containers for Cloudflare Tunnel, Portainer (for managing Docker containers), and Duplicati (for backup), all set up with a cloudflared network bridge to securely expose the apps.</description>
      <content:encoded><![CDATA[<h2 id="update-the-system">Update the system</h2>
<p>From this moment, we&rsquo;ll assume you&rsquo;re still logged in as <code>root</code>. After all, this is a fresh install of Linux, right?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt update
</span></span><span style="display:flex;"><span>apt upgrade -y
</span></span></code></pre></div><h2 id="install-essential-utilities">Install essential utilities</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt install sudo htop curl nano wget net-tools
</span></span></code></pre></div><h2 id="change-root-password">Change root password</h2>
<p>This is just in case you don&rsquo;t think the assigned root password is not complex enough for your liking:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>passwd
</span></span></code></pre></div><p>Then enter you new password twice.</p>
<h2 id="update-timezone">Update Timezone</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dpkg-reconfigure tzdata
</span></span></code></pre></div><h2 id="add-non-root-user">Add non-root user</h2>
<h3 id="add-user">Add user</h3>
<p>Change <code>username</code> with the username of your choice:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>adduser username
</span></span></code></pre></div><h3 id="add-user-to-sudoers-group">Add user to sudoers group</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>usermod -aG sudo username
</span></span></code></pre></div><p>So, the non-root user is ready. From this moment on, we&rsquo;ll assume you&rsquo;re logged as that non-root user.</p>
<h2 id="change-the-hostname">Change the hostname</h2>
<h3 id="edit-etchostname">Edit <code>/etc/hostname</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo nano /etc/hostname
</span></span></code></pre></div><p>And change accordingly.</p>
<h3 id="edit-etchosts">Edit <code>/etc/hosts</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo nano /etc/hosts
</span></span></code></pre></div><p>And change accordingly.</p>
<h3 id="reboot">Reboot</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo reboot
</span></span></code></pre></div><h2 id="install-docker-and-docker-compose">Install Docker and Docker Compose</h2>
<h3 id="install-docker">Install Docker</h3>
<p>Follow the instructions applicable for your system from the official Docker <a href="https://docs.docker.com/engine/install/">documentation</a>. My favorite systems are <a href="https://docs.docker.com/engine/install/ubuntu/">Ubuntu</a> and <a href="https://docs.docker.com/engine/install/debian/">Debian</a>, and I actually prefer to use the <a href="https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository">install using the repository</a> method:</p>
<h4 id="set-up-dockers-apt-repository">Set up Docker&rsquo;s Apt repository</h4>
<h5 id="for-ubuntu">For Ubuntu</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Add Docker&#39;s official GPG key:</span>
</span></span><span style="display:flex;"><span>sudo apt-get update
</span></span><span style="display:flex;"><span>sudo apt-get install ca-certificates curl gnupg
</span></span><span style="display:flex;"><span>sudo install -m <span style="color:#ae81ff">0755</span> -d /etc/apt/keyrings
</span></span><span style="display:flex;"><span>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
</span></span><span style="display:flex;"><span>sudo chmod a+r /etc/apt/keyrings/docker.gpg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add the repository to Apt sources:</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  <span style="color:#e6db74">&#34;deb [arch=&#34;</span><span style="color:#66d9ef">$(</span>dpkg --print-architecture<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;</span><span style="color:#66d9ef">$(</span>. /etc/os-release <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;</span>$VERSION_CODENAME<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34; stable&#34;</span> | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span><span style="display:flex;"><span>sudo apt-get update
</span></span></code></pre></div><h5 id="for-debian">For Debian</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Add Docker&#39;s official GPG key:</span>
</span></span><span style="display:flex;"><span>sudo apt-get update
</span></span><span style="display:flex;"><span>sudo apt-get install ca-certificates curl gnupg
</span></span><span style="display:flex;"><span>sudo install -m <span style="color:#ae81ff">0755</span> -d /etc/apt/keyrings
</span></span><span style="display:flex;"><span>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
</span></span><span style="display:flex;"><span>sudo chmod a+r /etc/apt/keyrings/docker.gpg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add the repository to Apt sources:</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  <span style="color:#e6db74">&#34;deb [arch=&#34;</span><span style="color:#66d9ef">$(</span>dpkg --print-architecture<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;</span><span style="color:#66d9ef">$(</span>. /etc/os-release <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;</span>$VERSION_CODENAME<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34; stable&#34;</span> | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span><span style="display:flex;"><span>sudo apt-get update
</span></span></code></pre></div><h4 id="install-the-docker-packages">Install the Docker packages</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</span></span></code></pre></div><h3 id="install-docker-compose">Install Docker Compose</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install docker-compose
</span></span></code></pre></div><h2 id="add-user-to-the-docker-group">Add user to the Docker group</h2>
<ul>
<li>Check if docker group already exists: <code>grep docker /etc/group</code></li>
<li>Add user to the docker group: <code>usermod -aG docker username</code> (don&rsquo;t forget to change <code>username</code> to the username of your choice)</li>
</ul>
<h2 id="create-a-network-bridge-for-docker-containers">Create a network bridge for Docker Containers</h2>
<p>From now on, the instructions here is if you plan to expose your applications via Cloudflare Tunnel.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker network create -d bridge cloudflared
</span></span></code></pre></div><h2 id="install-cloudflare-tunnel">Install Cloudflare Tunnel</h2>
<ul>
<li>Make a directory: <code>mkdir appdata/cloudflared</code> <em>(the directory structure is up to you)</em></li>
<li>CD to that directory: <code>cd appdata/cloudflared</code></li>
<li>Create the <code>docker-compose.yml</code> file: <code>nano docker-compose.yml</code></li>
</ul>
<p>Then paste the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3.3&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tunnel</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">cloudflared-tunnel</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">cloudflare/cloudflared</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">command</span>: <span style="color:#ae81ff">tunnel --no-autoupdate run</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TUNNEL_TOKEN=[paste_here_your_actual_token]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">cloudflared</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">cloudflared</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>Don&rsquo;t forget to paste your actual token that will be generated when you create a new tunnel in Cloudflare.</p>
<h2 id="install-portainer">Install Portainer</h2>
<h3 id="via-docker-compose">Via Docker Compose</h3>
<p>Same as above, mkdir for portainer, then create the <code>docker-compose.yml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">portainer</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">portainer/portainer-ce:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">portainer</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=Asia/Manila</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/var/run/docker.sock:/var/run/docker.sock</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./data:/data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#    ports:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#      - 9000:9000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#      - 8000:8000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#      - 9443:9443</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">cloudflared</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cloudflared</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>Note that I commented out the ports portion of the <code>docker-compose.yml</code> because we&rsquo;re not exposing the ports to the internet. Instead, we&rsquo;re using Cloudflare Tunnel to expose the apps.</p>
<h2 id="install-duplicati">Install Duplicati</h2>
<p>All these efforts you do to set up Docker containers will go to waste if you don&rsquo;t do a proper backup of your config and data files.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;2.1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">duplicati</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">lscr.io/linuxserver/duplicati:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">duplicati</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=0</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=0</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=America/Denver</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./config:/config</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./backups:/backups</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/home/username:/source</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#    ports:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#      - 8200:8200</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">cloudflared</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cloudflared</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>I prefer to run Duplicati as root so I won&rsquo;t have to deal with read permission issues in the future, so I set <code>PUID</code> and <code>PGID</code> to <code>0</code>. Needless to say, you have to change your <code>TZ</code> and your <code>source folder</code> to map to the container.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to install Hugo in a Linux VPS</title>
      <link>https://deuts.org/p/hugo-linux-vps/</link>
      <pubDate>Sat, 12 Aug 2023 10:43:30 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-linux-vps/</guid>
      <description>This post explains how to install Hugo on Debian or Ubuntu. It covers installing an older version via APT, as well as installing the latest version from GitHub by downloading the .deb file, installing it, and ensuring the binary is properly copied to the /usr/bin/ directory. It also includes instructions for updating Hugo to the latest release.</description>
      <content:encoded><![CDATA[<h2 id="via-apt">Via APT</h2>
<p>If you&rsquo;re running Debian or Ubuntu on your VPS, you can actually easily install Hugo via:</p>
<pre tabindex="0"><code class="language-bin" data-lang="bin">sudo apt install hugo
</code></pre><p>However, the version you can get from the repository is so old. Mine&rsquo;s around version 0.80 I think.</p>
<h2 id="via-deb-file-from-github">Via Deb file from Github</h2>
<h3 id="download-and-run">Download and Run</h3>
<p>If you want the latest version of Hugo installed, you need to get it from <a href="https://github.com/gohugoio/hugo/releases">github</a>. As of this writing, the latest version is <a href="https://github.com/gohugoio/hugo/releases/tag/v0.117.0">v0.117.0</a>. Thus, you can run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://github.com/gohugoio/hugo/releases/download/v0.117.0/hugo_extended_0.117.0_linux-amd64.deb
</span></span><span style="display:flex;"><span>sudo dpkg -i hugo_extended_0.117.0_linux-amd64.deb
</span></span></code></pre></div><h3 id="copy-the-hugo-file">Copy the Hugo file</h3>
<p>By default, using the above method, hugo is saved under <code>/usr/local/bin</code>. You can verify that by running <code>which hugo</code> command. But this needs to be copied to the <code>/usr/bin</code> folder. Thus, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo cp /usr/local/bin/hugo /usr/bin/
</span></span></code></pre></div><h3 id="check-version">Check version</h3>
<p>You can double check if indeed you have the latest version by running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo version
</span></span></code></pre></div><h2 id="updating-hugo-to-the-latest-release">Updating Hugo to the latest release</h2>
<p>Redo all the installation instructions above including the <code>sudo cp /usr/local/bin/hugo /usr/bin/</code>  command.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Key Is Stored in Legacy Trusted.gpg Keyring</title>
      <link>https://deuts.org/p/key-legacy-trusted-gpg-keyring/</link>
      <pubDate>Wed, 09 Aug 2023 08:21:31 +0800</pubDate>
      <guid>https://deuts.org/p/key-legacy-trusted-gpg-keyring/</guid>
      <description>This post addresses the issue of legacy keyrings on fresh installs of Debian or Ubuntu, where an error message warns about keys stored in the deprecated trusted.gpg keyring. The solution is to copy the keyring to the trusted.gpg.d directory and update the system using sudo apt update.</description>
      <content:encoded><![CDATA[<p>Have you ever encountered issues with legacy keyrings when running a fresh install of Debian or Ubuntu?</p>
<blockquote>
<p>W: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details</p>
</blockquote>
<h3 id="the-quick-fix">The Quick Fix</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd /etc/apt
</span></span><span style="display:flex;"><span>sudo cp trusted.gpg trusted.gpg.d
</span></span><span style="display:flex;"><span>sudo apt update
</span></span></code></pre></div><p>More info can be read <a href="https://stackoverflow.com/questions/73570418/w-key-is-stored-in-legacy-trusted-gpg-keyring-etc-apt-trusted-gpg-see-the-d">here</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Make Joplin work with Nginx Proxy Manager and Duplicati (Docker)</title>
      <link>https://deuts.org/p/joplin-npm-duplicati-docker/</link>
      <pubDate>Mon, 24 Oct 2022 22:03:23 +0800</pubDate>
      <guid>https://deuts.org/p/joplin-npm-duplicati-docker/</guid>
      <description>A guide on setting up a Joplin server using Docker Compose, including benefits like faster syncing, easy note sharing, and user access. It covers steps for creating a Docker network, configuring Nginx Proxy Manager, setting up the app and database, and managing backups with Duplicati. Troubleshooting steps for connection issues between Joplin and PostgreSQL are also provided.</description>
      <content:encoded><![CDATA[<p>I was wondering why Docker apps don&rsquo;t come as easy to install like <a href="https://www.linuxserver.io/">Linuxserver</a>&rsquo;s? Case in point: Joplin.</p>
<p>Well, I really do think Joplin server&rsquo;s <a href="https://github.com/laurent22/joplin/blob/dev/docker-compose.server.yml">documentation</a> needs a lot more polishing. Fortunately I was able to make it work in my system, even without exposing additional ports to the public, which I&rsquo;m sharing below.</p>
<h2 id="why-joplin-server-instead-of-webdav-dropbox-onedrive-nextcloud-etc">Why Joplin Server instead of Webdav, Dropbox, OneDrive, NextCloud, etc.</h2>
<p>According to <a href="https://noted.lol/install-joplin-server-using-docker-compose/">Noted</a>:</p>
<ul>
<li>Speed up the sync<br>
<em>I still have to find out if this really is true</em></li>
<li>Sharing a note with anyone, using a URL<br>
<em>This is actually my favorite feature. This enables me to share notes that are not so private to other people by just sharing a link to the public page. Then as I update my note, the page also updates.</em></li>
<li>User access<br>
<em>I still have to evangelize other people about Joplin so I could add users to my Joplin server, if ever they need a sync server.</em></li>
<li>Sharing a notebook with a user on the same Joplin Server<br>
<em>This is also a great feature, especially if I have other users I can share my Joplin server with.</em></li>
</ul>
<h2 id="docker-compose-for-joplin-server">Docker Compose for Joplin Server</h2>
<h3 id="docker-network">Docker Network</h3>
<p>Make sure that you already have a ready Docker Network for your Joplin app and database. This will make sure that you don&rsquo;t expose additional ports to the public. If you don&rsquo;t have a dedicated network yet, just run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo docker network create -d bridge examplenetwork
</span></span></code></pre></div><h3 id="nginx-proxy-manager">Nginx Proxy Manager</h3>
<p>I would assume that you already have the Nginx Proxy Manager installed and it&rsquo;s running in the same <code>examplenetwork</code> . Now, add a new Proxy Host with your domain name, e.g. <code>joplin.example.com</code>, then hostname should be <code>joplin_app</code> (container name below) and port <code>22300</code>.</p>
<h3 id="install-joplin-app-and-db">Install Joplin App and DB</h3>
<p>On your favorite directory, just create the <code>docker-compose.yml</code> file, which should contain:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">postgres:13</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">joplin_db</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">./data/postgres:/var/lib/postgresql/data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#        ports:		we don&#39;t need this anymore because we&#39;re reverse proxying anyway</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#            - &#34;5432:5432&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_PASSWORD=yHZ4TbsyKJI0Xi2sUmXDuz</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_USER=Barrier1542</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_DB=Sudden9997</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">examplenetwork</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">joplin/server:latest</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">joplin_app</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#        ports:		we don&#39;t need this anymore because we&#39;re reverse proxying anyway</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#            - &#34;22300:22300&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">APP_PORT=22300</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">APP_BASE_URL=https://joplin.example.com</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">DB_CLIENT=pg</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_PASSWORD=yHZ4TbsyKJI0Xi2sUmXDuz</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_DATABASE=Sudden9997</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_USER=Barrier1542</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_PORT=5432</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_HOST=db</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">examplenetwork </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">examplenetwork</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>Don&rsquo;t worry about the usernames and passwords in my sample <code>docker-compose.yml</code> file, they were just randomly generated and not used for production elsewhere.</p>
<p>Then run <code>sudo docker-compose up -d</code></p>
<p>Did you know that the Joplin docker image alone is worth 1.2GB of storage in your server? Postgres is another 373MB.</p>
<h2 id="backup-with-duplicati">Backup with Duplicati</h2>
<p>As Joplin populates your <code>/data/postgres</code> folder in the initial setup, as well as along the way as you actually use your server, it creates files and directories with user and group permissions assigned to <code>systemd-coredump</code>. Worse, they are readable and writable by the user only. That is usually fine, until you try backing them up using Duplicati.</p>
<p>The solution: run your Duplicati docker app with root privileges.</p>
<p>I know the rule about not running apps as root. But that&rsquo;s the only way I see so far that work. Perhaps, Joplin could give us an option to create and update files in the persistent volumes as a regular user. That way, I can run Duplicati as that same user and could access the files for backup.</p>
<h2 id="update-as-of-mar-24-2024">Update as of Mar. 24, 2024</h2>
<p>For whatever reason, recently I noticed my Joplin server was down. The GUI is not accessible, and the sync process is not pushing though. Looked at the log, and it appears the Joplin app container is having trouble connecting to the Postgres database.</p>
<p>In order to fix it, I needed to remove all the reference to the examplenetwork and uncomment all ports to make them active. Moreover, I needed to point directly the hostname in Nginx Proxy Manager (NPM) to the server&rsquo;s IP address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">postgres:13</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">joplin_db</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">./data/postgres:/var/lib/postgresql/data</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#e6db74">&#34;5432:5432&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_PASSWORD=yHZ4TbsyKJI0Xi2sUmXDuz</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_USER=Barrier1542</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_DB=Sudden9997</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">joplin/server:latest</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">joplin_app</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#e6db74">&#34;22300:22300&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">APP_PORT=22300</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">APP_BASE_URL=https://joplin.example.com</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">DB_CLIENT=pg</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_PASSWORD=yHZ4TbsyKJI0Xi2sUmXDuz</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_DATABASE=Sudden9997</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_USER=Barrier1542</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_PORT=5432</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">POSTGRES_HOST=db</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Can This Old Laptop Handle Plex?</title>
      <link>https://deuts.org/p/can-old-laptop-handle-plex/</link>
      <pubDate>Thu, 20 Oct 2022 22:14:49 +0800</pubDate>
      <guid>https://deuts.org/p/can-old-laptop-handle-plex/</guid>
      <description>A 7th-gen i5 laptop should easily handle Plex, even for 4K streams. A low-spec Beelink S1 Mini PC (Celeron N3450) runs Plex and several Docker services without issue.</description>
      <content:encoded><![CDATA[<p>Bumped into this post on <a href="https://www.reddit.com/r/PleX/comments/y5uaon/can_this_old_laptop_handle_plex/">Reddit</a>, asking if his &lsquo;old&rsquo; laptop can handle Plex:</p>
<p><img alt="laptop-plex" loading="lazy" src="/p/can-old-laptop-handle-plex/laptop-plex.png"></p>
<p>Imagine: a 7th-gen i5 with a dedicated NVIDIA graphics, and he&rsquo;s asking if his laptop can handle Plex. I&rsquo;m sure this spec can handle 1 or 2 4K streams easily.</p>
<p>I have an old Beelink S1 Mini PC, with an Intel Celeron N3450, Quad Core, 4GB of RAM and 64GB eMMC, and this thing handles Plex well, albeit I only watch 720p movies and shows. But it&rsquo;s running not just Plex, but a host of other docker containers, including but not limited to:</p>
<ul>
<li>Radarr</li>
<li>Sonarr</li>
<li>Nginx Proxy Manager</li>
<li>WordPress server and database</li>
<li>Tautulli</li>
<li>Portainer</li>
<li>Syncthing</li>
<li>Duplicati</li>
<li>Jackett</li>
<li>NZBGet</li>
<li>Dockuwiki</li>
<li>ruTorrent</li>
</ul>
<p>So, yeah, to answer OP&rsquo;s question, it is very much capable.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to Create a Bash Script and Make it Executable?</title>
      <link>https://deuts.org/p/create-bash-script-executable/</link>
      <pubDate>Thu, 20 Oct 2022 20:55:43 +0800</pubDate>
      <guid>https://deuts.org/p/create-bash-script-executable/</guid>
      <description>Create a bash script to easily run long commands, like hugo server, by saving them in a file, making it executable, and running the script.</description>
      <content:encoded><![CDATA[<h2 id="long-commands-are-hard-to-memorize">Long commands are hard to memorize</h2>
<p>Let&rsquo;s say for example you want to run <code>hugo server</code>, but instead of on the localhost you want to run it over your VPS server (or even from your home server). Without the bash script, you&rsquo;ll need to run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>hugo server --bind<span style="color:#f92672">=</span>&lt;IP ADDRESS&gt; --baseURL<span style="color:#f92672">=</span>http://&lt;IP ADDRESS&gt;:1313
</span></span></code></pre></div><h2 id="create-a-bash-script">Create a bash script</h2>
<h3 id="create-the-bash-file">Create the bash file</h3>
<p>Let&rsquo;s name the bash file <code>serve.sh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nano serve.sh
</span></span></code></pre></div><h3 id="enter-your-commands">Enter your commands</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>hugo server --bind<span style="color:#f92672">=</span>&lt;IP ADDRESS&gt; --baseURL<span style="color:#f92672">=</span>http://&lt;IP ADDRESS&gt;:1313
</span></span></code></pre></div><p>Don&rsquo;t forget to include <code>#!/bin/bash</code> at the first line.</p>
<h3 id="multiple-commands">Multiple Commands</h3>
<p>If you need to make multiple commands, enter each command in separate lines, and end the file with <code>exec bash</code>, like for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>cd appdata/app/subfolder
</span></span><span style="display:flex;"><span>PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;$(whoami)@$(hostname):$(pwd)# &#39;</span>
</span></span><span style="display:flex;"><span>exec bash
</span></span></code></pre></div><p><code>Ctrl+O</code> to save the file<br>
<code>Ctrl+X</code> to close the file</p>
<h2 id="make-it-executable">Make it executable</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo chmod +x serve.sh
</span></span></code></pre></div><p>Enter password as may be necessary.</p>
<h2 id="run-the-script">Run the script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>./serve.sh
</span></span></code></pre></div><p>Assuming we don&rsquo;t get into permission problems, our script should be working well.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
